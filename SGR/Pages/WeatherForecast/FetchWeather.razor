@page "/fetchweather"

@inject NavigationManager NavigationManager

<h3>Fetch Weather Forecast</h3>

<h5>ID: @_hubConnection.ConnectionId</h5>


@if (IsConnected)
{
    <button class="btn btn-danger" @onclick="() => Disconnect()">Disconnect</button>
}
else
{
    <button class="btn btn-primary" @onclick="() => Connect()">Connect</button>
}
<p></p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private WeatherForecast[] forecasts;
    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/connector")).Build();

        _hubConnection.On<WeatherForecast[]>("GetMessage", (item) =>
        {
            forecasts = item;
            StateHasChanged(); //Indica al componente blazor que ha cambiado el estado para re-renderizar
        });

        await Connect();
    }

    protected async Task Connect()
    {
        await _hubConnection.StartAsync();
    }

    protected async Task Disconnect()
    {
        await _hubConnection.StopAsync();
    }

    public bool IsConnected =>
        _hubConnection.State == HubConnectionState.Connected;

}
