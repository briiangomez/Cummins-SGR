@page "/Dealers"
@using SGRBlazorApp.Data;
@using CuriousDriveRazorLibrary
@using SGRBlazorApp.Services
@using SGRBlazorApp.Shared
@using Blazored.LocalStorage
@inject IBookStoresService<Dealer> bookStoresService
@inject IUserService userService
@inject ILocalStorageService localStorageService
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Dealers", Policy = "SeniorEmployee")]

<div class="col-12">
    <h3><b>Enter Dealers Information</b></h3>
    <hr />
    <ServerValidations IsVisible="IsVisible" Result="Result">
        @RecordName
    </ServerValidations>

    <EditForm Model="@Dealers" OnValidSubmit="@SaveDealers">
        <DataAnnotationsValidator />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">first name :</label>
            <input @ref="DealersNameTextBox" class="form-control col-3" @bind="Dealers.DealersName" placeholder="Dealers's name" />
            &nbsp;<ValidationMessage For="@(() => Dealers.DealersName)" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">city :</label>
            <SelectCity></SelectCity>
        </div>
        <br />
        <div class="col-12 row">
            <span class="col-2"></span>
            <input type="submit" class="form-control col-1 btn btn-primary" value="Save" />
            <span>&nbsp;</span>
            <input type="submit" class="form-control col-1 btn btn-primary" value="Clear" />
        </div>

    </EditForm>

</div>
<br />
<div class="col-12">
    <h3><b>Dealer</b></h3>
    <SpinLoader IsLoading="isLoading">
        <LoadingTemplate>
            <div class="col-12" style="background-color: lightgray; height:400px; vertical-align:middle">
                <br /><br />
                <Chase Center="true" Color="#c21f13" Size="70px"></Chase>
            </div>
        </LoadingTemplate>
        <ContentTemplate>
            @if (filteredDealersList != null)
            {
                <GridView Items="filteredDealersList">
                    <GridColumns>
                        <GridColumn ColumnTitle="DealersId"
                                    OnSearchTextChanged="@(e => OnDealersSearchTextChanged(e, "DealersId"))"></GridColumn>
                        <GridColumn ColumnTitle="DealersName"
                                    OnSearchTextChanged="@(e => OnDealersSearchTextChanged(e, "DealersName"))"></GridColumn>
                        <GridColumn ColumnTitle="City"
                                    OnSearchTextChanged="@(e => OnDealersSearchTextChanged(e, "City"))"></GridColumn>

                        <GridColumn ColumnTitle="Actions"></GridColumn>
                    </GridColumns>
                    <GridRow Context="Dealers">
                        <td>@Dealers.PubId</td>
                        <td>@Dealers.DealersName</td>
                        <td>@Dealers.City</td>
                        <th>
                            <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => EditDealers(Dealers))">Edit</a> |
                            <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => DeleteDealers(Dealers.PubId))">Delete</a>
                        </th>
                    </GridRow>

                </GridView>
            }
            else
            {
                <NoResultMessage></NoResultMessage>
            }

        </ContentTemplate>
    </SpinLoader>

</div>

@code {

    public Dealer Dealers { get; set; }
    public List<Dealer> DealersList { get; set; }
    public List<Dealer> filteredDealersList { get; set; }
    public string[] Cities { get; set; }
    ElementReference DealersNameTextBox;

    public bool IsVisible { get; set; }
    public bool Result { get; set; }
    public string RecordName { get; set; }
    public bool ReloadList { get; set; }
    bool isLoading = true;

    protected override void OnInitialized()
    {
        Dealers = new Dealer();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadDealerss();

            isLoading = false;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadDealerss()
    {
        await Task.Delay(500);

        DealersList = filteredDealersList = await bookStoresService.GetAllAsync("Dealerss/GetDealerss");

        if (DealersList == null)
        {
            RefreshRequest refreshRequest = new RefreshRequest();
            refreshRequest.AccessToken = await localStorageService.GetItemAsync<string>("accessToken");
            refreshRequest.RefreshToken = await localStorageService.GetItemAsync<string>("refreshToken");

            var user1 = await userService.RefreshTokenAsync(refreshRequest);
            await localStorageService.SetItemAsync("accessToken", user1.AccessToken);

            DealersList = filteredDealersList = await bookStoresService.GetAllAsync("authors/GetDealerss");
        }

        StateHasChanged();
    }

    private async Task SaveDealers()
    {
        if (Dealers.PubId == 0)
            await bookStoresService.SaveAsync("Dealerss/CreateDealers", Dealers);
        else
            await bookStoresService.UpdateAsync("Dealerss/UpdateDealers", Dealers.PubId, Dealers);

        await LoadDealerss();

        Result = true;
        IsVisible = true;

        var DealersName = Dealers.DealersName;

        RecordName = DealersName;

        Dealers = new Dealers();

        //await JSRuntime.InvokeVoidAsync("saveMessage", firstName, lastName);
        await JSRuntime.InvokeVoidAsync("setFocusOnElement", DealersNameTextBox);
    }

    private async Task DeleteDealers(int pubId)
    {
        await bookStoresService.DeleteAsync("Dealerss/DeleteDealers", pubId);

        await LoadDealerss();

        //throw new Exception("DeleteAuthor");
    }

    private void EditDealers(Dealers argDealers)
    {
        Dealers = argDealers;
    }

    private void OnDealersSearchTextChanged(ChangeEventArgs changeEventArgs, string columnTitle)
    {
        string searchText = changeEventArgs.Value.ToString();

        ReloadList = true;

        switch (columnTitle)
        {
            case "DealersId":
                filteredDealersList = DealersList.Where(pub => pub.PubId.ToString().Contains(searchText)).ToList();
                break;
            case "DealersName":
                filteredDealersList = DealersList.Where(pub => pub.DealersName.ToLower().Contains(searchText)).ToList();
                break;
            case "City":
                filteredDealersList = DealersList.Where(pub => pub.City.ToLower().Contains(searchText)).ToList();
                break;
            default:
                Console.WriteLine("Default case");
                break;
        }

        StateHasChanged();
    }
}
