@page "/addOem"
@using SGRBlazorApp.Data
@using SGRBlazorApp.Interfaces
@using CuriousDriveRazorLibrary
@using Blazored.LocalStorage
@inject ILocalStorageService localStorageService
@inject ISgrService<Oem> bookStoresService
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@implements IDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
<div class="col-12">
    <h3><b>Agregar OEM/DOEM</b></h3>
    <hr />

    <ServerValidations IsVisible="IsVisible" Result="Result">
        @RecordName
    </ServerValidations>

    <EditForm Model="@Oem" OnValidSubmit="@SaveOem">
        @*<DataAnnotationsValidator />*@

        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Nombre:</label>
            <InputText class="form-control col-3" @bind-Value="Oem.Nombre" placeholder="Nombre" required/>
            &nbsp;<ValidationMessage For="@(() => Oem.Nombre)" />
        </div>
        <br />
        <div class="col-12 row">
            <RadzenRadioButtonList @bind-Value=@Tipo TValue="int" Change=@((args) => OnChangeRB(args, "RadioButtonList with horizontal orientation")) Style="width:50%">
                <Items>
                    <RadzenRadioButtonListItem Text="OEM" Value="1" />
                    <RadzenRadioButtonListItem Text="DOEM" Value="2" />
                </Items>
            </RadzenRadioButtonList>
            @*<select class="form-control" @bind="@Oem.Aux1" name="Aux1" id="Aux1">
            <option value="1">Oem</option>
            <option value="2">Doem</option>
        </select>*@
            &nbsp;<ValidationMessage For="@(() => Oem.Nombre)" />
        </div>
        <br />
        <div class="col-12 row">
            <span class="col-2"></span>
            <input type="submit" class="btn btn-success" value="Guardar" />
            <span>&nbsp;</span>
            <a style="background-color:red;color:white" class="btn btn-success" href="/Oems">Cancelar</a>
        </div>
    </EditForm>
</div>
<br />


@code
{
    public Oem Oem { get; set; }
    public bool IsVisible { get; set; }
    public bool Result { get; set; }
    public string RecordName { get; set; }
    public int Tipo { get; set; } = 0;
    public void Dispose()
    {
        Console.WriteLine("Oems - Dispose");
    }

    void OnChangeRB(int? value, string name)
    {
        Tipo = value.Value;
    }

    private Dictionary<string, object> htmlAttribute { get; set; } = new Dictionary<string, object>() {
            {"maxlength", "8" }
            };

    //private async void OnChange(KeyboardEventArgs e)
    //{
    //    if(!String.IsNullOrEmpty(Oem.NumeroOem))
    //    {
    //        if (Oem.NumeroOem.Length > 7)
    //        {
    //            await JSRuntime.MostrarMensaje("Error!", "El Numero de Oem no puede ser mayor a 8 caracteres", TipoMensajeSweetAlert.error);
    //            Oem.NumeroOem = Oem.NumeroOem.Substring(0,8);
    //        }
    //    }
    //}

    //string stringValue = "";

    //private async Task SetValue(string Value)
    //{
    //    if (Value.Length > 7)
    //    {
    //        await JSRuntime.MostrarMensaje("Error!", "El Numero de Oem no puede ser mayor a 8 caracteres", TipoMensajeSweetAlert.error);
    //        Oem.NumeroOem = Value.Substring(0,8);
    //    }
    //    else
    //    {
    //        stringValue = Value;

    //    }
    //}

    protected override void OnInitialized()
    {
        Console.WriteLine("Clientes - OnInitialized");
        base.OnInitialized();
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    ClaimsPrincipal user;

    bool IsUserAuthenticated;
    bool IsPublisher;
    bool IsSeniorEmployee;

    public int Count { get; set; } = 400;

    private SGRBlazorApp.Data.User users;

    protected override async Task OnInitializedAsync()
    {
        user = (await authenticationStateTask).User;

        if (!user.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/");
        }
        Console.WriteLine("Clientes - OnInitializedAsync");

        Oem = new Oem();
        await base.OnInitializedAsync();
    }

    private async Task SaveOem()
    {
        Oem.Aux1 = Tipo > 0 ? Tipo.ToString() : null;
        await bookStoresService.SaveAsync("Oems/CreateOems", Oem);

        //if(Oem.NumeroOem.Length < 8)
        //{
        //    Oem.NumeroOem = Oem.NumeroOem.PadLeft(8, '0');
        //    //Oem.NumeroOem = Oem.NumeroOem.ToString("00000000");
        //    //Oem.NumeroOem = Oem.NumeroOem.ToString("D8");
        //}
        Result = true;
        IsVisible = true;

        //var firstName = Oem.NumeroOem;
        //var lastName = Oem.Oem;

        //RecordName = firstName + " " + lastName;

        Oem = new Oem();

        navigationManager.NavigateTo("/Oems");
    }
}
