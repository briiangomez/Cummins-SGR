@page "/Dealers"
@using SGRBlazorApp.Data
@using SGRBlazorApp.Interfaces
@using CuriousDriveRazorLibrary
@using Blazored.LocalStorage
@using SGRBlazorApp.Shared
@inject ISgrService<Dealer> bookStoresService
@inject IUserService userService
@inject ILocalStorageService localStorageService
@inject IJSRuntime JSRuntime
@implements IDisposable
@inject NavigationManager navigationManager
@inject TooltipService tooltipService


<div class="col-12">

    <h3><b>Dealers</b></h3>
    <br />
    <AuthorizeView Roles="Administrador" Policy="SeniorEmployee">
        <Authorized>
            <a class="btn btn-primary" style="text-underline-position:below; cursor:pointer; " href="/addDealer">Nuevo Dealer</a>
        </Authorized>
    </AuthorizeView>
    <br />
    <br />

    @if (isLoading)
    {
<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                FilterMode="FilterMode.Simple" PageSize="20" AllowPaging="true" AllowSorting="true" Data="@DealerList.OrderBy(o => o.Name).ToList()" TItem="Dealer"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                LogicalFilterOperator="LogicalFilterOperator.Or">
    <Columns>
        <RadzenDataGridColumn TItem="Dealer" Property="Name" Title="Nombre" />
        <RadzenDataGridColumn TItem="Dealer" Property="LocationCode" Title="Codigo" />
        <RadzenDataGridColumn TItem="Dealer" Property="Address" Title="Direccion" />
        <RadzenDataGridColumn TItem="Dealer" Property="City" Title="Ciudad" />

        @*<RadzenDataGridColumn TItem="Dealer" Property="State" Title="" />*@
        <RadzenDataGridColumn TItem="Dealer" Title="Provincia / Estado" Property="Provincia.Nombre">
            <Template Context="Equipo">
                @if (Equipo.ProvinciaId != null)
                {@(Equipo.Provincia.Nombre)}
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Dealer" Title="Pais" Property="Pais.Nombre">
            <Template Context="Equipo">
                @if (Equipo.PaisId != null)
                {@(Equipo.Pais.Nombre)}
            </Template>
        </RadzenDataGridColumn>
        @*<RadzenDataGridColumn TItem="Dealer" Property="Country" Title="Pais" />*@
        <RadzenDataGridColumn TItem="Dealer" Property="Phone" Title="Telefono" />
        <RadzenDataGridColumn TItem="Dealer" Context="sampleBlazorModelsSampleOrder" Filterable="false" Sortable="false" TextAlign="TextAlign.Left" Title="Editar" Width="100px">
            <Template Context="Certificacion">
                <RadzenButton Icon="edit" Size="ButtonSize.Medium" Click="@(args => EditRow(Certificacion.Id))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>

        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Dealer" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Left" Title="Activar/Desactivar" Width="150px">
            <Template Context="Certificacion">
                @if (Certificacion.Deleted == null)
                {
    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Medium" Click="@(args => DeleteDealer(Certificacion.Id))" @onclick:stopPropagation="true">
    </RadzenButton> }
                            else
                            {
    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="done" Size="ButtonSize.Medium" Click="@(args => ActivarDealer(Certificacion.Id))" @onclick:stopPropagation="true">
    </RadzenButton>}
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid> @*<table id="dealers" class="table" style="width:100%">
                                        <thead>
                                            <tr>
                                                <th>Nombre</th>
                                                <th>Codigo</th>
                                                <th>Codigo Distribuidor</th>
                                                <th>Direccion</th>
                                                <th>Ciudad</th>
                                                <th>Provincia / Estado</th>
                                                <th>Pais</th>
                                                <th>Telefono</th>
                                                <th style="width:15%"></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var Dealer in DealerList)
                                            {
                            <tr>
                                <td>@Dealer.Name</td>
                                <td>@Dealer.LocationCode</td>
                                <td>@Dealer.DistributorCode</td>
                                <td>@Dealer.Address</td>
                                <td>@Dealer.City</td>
                                <td>@Dealer.State</td>
                                <td>@Dealer.Country</td>
                                <td>@Dealer.Phone</td>
                                <AuthorizeView Roles="Administrador" Policy="SeniorEmployee">
                                    <Authorized>
                                        <th>
                                            <a class="btn btn-success" href=@string.Format("/editDealer/{0}", Dealer.Id)><i class="fa fa-pencil"></i></a>
                                            @{ if (Dealer.Deleted == null)
                                                {
                        <a style="background-color:red;color:white" class="btn btn-success" @onclick="(() => DeleteDealer(Dealer.Id))"><i class="fa fa-remove"></i></a> }
                    else
                    {
                    <a style="background-color:green;color:white" class="btn btn-success" @onclick="(() => ActivarDealer(Dealer.Id))"><i class="fa fa-check"></i></a> } }
                                        </th>
                                    </Authorized>
                                </AuthorizeView>
                            </tr>}
                                        </tbody>
                                    </table>*@ }
else
{
<div class="col-12" style="background-color: lightgray; height:400px; vertical-align:middle">
    <br /><br />
    <Chase Center="true" Color="#c21f13" Size="70px"></Chase>
</div>}
    @*<SpinLoader IsLoading="isLoading">
            <LoadingTemplate>
                <div class="col-12" style="background-color: lightgray; height:400px; vertical-align:middle">
                    <br /><br />
                    <Chase Center="true" Color="#c21f13" Size="70px"></Chase>
                </div>
            </LoadingTemplate>
            <ContentTemplate>
                @if (filteredDealerList != null)
                {
                    <GridView Items="filteredDealerList" ReloadList="IsGridViewFiltered">
                        <GridColumns>
                            <GridColumn ColumnTitle="Nombre"
                                        OnSearchTextChanged="@(e => OnDealerSearchTextChanged(e, "Name"))"></GridColumn>
                            <GridColumn ColumnTitle="Codigo"
                                        OnSearchTextChanged="@(e => OnDealerSearchTextChanged(e, "LocationCode"))"></GridColumn>
                            <GridColumn ColumnTitle="Codigo Distribuidor"
                                        OnSearchTextChanged="@(e => OnDealerSearchTextChanged(e, "DistributorCode"))"></GridColumn>
                            <GridColumn ColumnTitle="Direccion"
                                        OnSearchTextChanged="@(e => OnDealerSearchTextChanged(e, "Address"))"></GridColumn>
                            <GridColumn ColumnTitle="Ciudad"
                                        OnSearchTextChanged="@(e => OnDealerSearchTextChanged(e, "City"))"></GridColumn>
                            <GridColumn ColumnTitle="Provincia/Estado"
                                        OnSearchTextChanged="@(e => OnDealerSearchTextChanged(e, "State"))"></GridColumn>
                            <GridColumn ColumnTitle="Pais"
                                        OnSearchTextChanged="@(e => OnDealerSearchTextChanged(e, "Country"))"></GridColumn>
                            <GridColumn ColumnTitle="Telefono"
                                        OnSearchTextChanged="@(e => OnDealerSearchTextChanged(e, "Phone"))"></GridColumn>
                            <AuthorizeView Roles="Administrador" Policy="SeniorEmployee">
                                <Authorized>
                                    <GridColumn ColumnTitle="Actions"></GridColumn>
                                </Authorized>
                            </AuthorizeView>
                        </GridColumns>
                        <GridRow Context="Dealer">
                            <td>
                                <NavLink href=@string.Format("/Dealers/Dealerdetail/{0}", @Dealer.Id)>
                                    @Dealer.Id
                                </NavLink>
                            </td>

                        </GridRow>
                    </GridView>
                }
            </ContentTemplate>
        </SpinLoader>*@
</div>

@code { public Dealer Dealer { get; set; }
    public List<Dealer> DealerList { get; set; }
    public List<Dealer> filteredDealerList { get; set; }
    public string SelectedCity { get; set; }

    public bool IsVisible { get; set; }
    public bool Result { get; set; }
    public string RecordName { get; set; }
    public string[] Cities { get; set; }
    public bool IsGridViewFiltered { get; set; }
    bool isLoading = false;

    ElementReference firstNameTextBox;

    ElementReference htmlButton;
    RadzenButton radzenButton;

    void ShowTooltipEdit(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Open(elementReference, "Editar Registro", options);

    void ShowTooltipDelete(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Open(elementReference, "Eliminar Registro", options);


    void EditRow(Guid id)
    {
        navigationManager.NavigateTo(string.Format("/editDealer/{0}", id));
    }

    void DeleteRow(Guid id)
    {
        navigationManager.NavigateTo(string.Format("/deleteSetting/{0}", id));
    }

    void ShowTooltip(ElementReference elementReference, TooltipOptions options = null)
    {
        tooltipService.Open(elementReference, options.Text, options);
    }

    protected override void OnInitialized()
    {
        Console.WriteLine("Dealers - OnInitialized");
        base.OnInitialized();
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    ClaimsPrincipal user;

    bool IsUserAuthenticated;
    bool IsPublisher;
    bool IsSeniorEmployee;

    public int Count { get; set; } = 400;

    private SGRBlazorApp.Data.User users;

    protected override async Task OnInitializedAsync()
    {
        user = (await authenticationStateTask).User;

        if (!user.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/");
        }
        Console.WriteLine("Dealers - OnInitializedAsync");

        Dealer = new Dealer();
        DealerList = filteredDealerList = await bookStoresService.GetAllAsync("Dealer/GetDealerFull");

        if (DealerList == null)
        {

            RefreshRequest refreshRequest = new RefreshRequest();
            refreshRequest.AccessToken = await localStorageService.GetItemAsync<string>("accessToken");
            refreshRequest.RefreshToken = await localStorageService.GetItemAsync<string>("refreshToken");
            var user1 = await userService.RefreshTokenAsync(refreshRequest);
            await localStorageService.SetItemAsync("accessToken", user1.AccessToken);

            DealerList = filteredDealerList = await bookStoresService.GetAllAsync("Dealer/GetDealerFull");
        }
        //DealerList = await DealerService.GetDealers();
        isLoading = true;
        //await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#dealers");
        await base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("Dealers - OnParametersSet");
        base.OnParametersSet();
    }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("Dealers - OnParametersSetAsync");
        await base.OnParametersSetAsync();
    }

    protected override bool ShouldRender()
    {
        base.ShouldRender();
        Console.WriteLine("Dealers - ShouldRender");

        return true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("Clientes - OnAfterRender - firstRender = " + firstRender);
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Clientes - OnAfterRenderAsync - firstRender = " + firstRender);
        //await JSRuntime.InvokeAsync<object>("TestDataTablesRemove", "#dealers");
        //await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#dealers");
        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        Console.WriteLine("Dealers - Dispose");
    }

    private async Task LoadDealers()
    {
        await Task.Delay(500);

        DealerList = filteredDealerList = await bookStoresService.GetAllAsync("Dealer/GetDealerFull");

        if (DealerList == null)
        {

            RefreshRequest refreshRequest = new RefreshRequest();
            refreshRequest.AccessToken = await localStorageService.GetItemAsync<string>("accessToken");
            refreshRequest.RefreshToken = await localStorageService.GetItemAsync<string>("refreshToken");
            var user1 = await userService.RefreshTokenAsync(refreshRequest);
            await localStorageService.SetItemAsync("accessToken", user1.AccessToken);

            DealerList = filteredDealerList = await bookStoresService.GetAllAsync("Dealer/GetDealerFull");
        }
        //await JSRuntime.InvokeAsync<object>("TestDataTablesRemove", "#dealers");
        //await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#dealers");
        StateHasChanged();
    }

    private async Task ActivarDealer(Guid DealerId)
    {
        var confirmado = await JSRuntime.Confirmar("Atencion!", "¿Desea activar el Dealer?", TipoMensajeSweetAlert.warning);
        if (confirmado)
        {
            await bookStoresService.DeleteAsync("Dealer/ActivateDealer/", DealerId);

            await LoadDealers();
        }
        //throw new Exception("DeleteDealer");
    }

    private async Task DeleteDealer(Guid DealerId)
    {
        var confirmado = await JSRuntime.Confirmar("Atencion!", "¿Desea desactivar el Dealer?", TipoMensajeSweetAlert.warning);
        if (confirmado)
        {
            await bookStoresService.DeleteAsync("Dealer/DeleteDealer/", DealerId);

            await LoadDealers();
        }
        //throw new Exception("DeleteDealer");
    }

    private void EditDealer(Dealer argDealer)
    {
        Dealer = argDealer;
    }

    private void OnSelectCityChange(ChangeEventArgs changeEventArgs)
    {
        SelectedCity = (string)changeEventArgs.Value;
    }

    private void OnDealerSearchTextChanged(ChangeEventArgs changeEventArgs, string columnTitle)
    {
        string searchText = changeEventArgs.Value.ToString();
        IsGridViewFiltered = true;

        switch (columnTitle)
        {
            case "Name":
                filteredDealerList = DealerList.Where(auth => auth.Name.ToLower().Contains(searchText)).ToList();
                break;
            case "LocationCode":
                filteredDealerList = DealerList.Where(auth => auth.LocationCode.ToLower().Contains(searchText)).ToList();
                break;
            case "DistributorCode":
                filteredDealerList = DealerList.Where(auth => auth.DistributorCode.ToLower().Contains(searchText)).ToList();
                break;
            case "Country":
                filteredDealerList = DealerList.Where(auth => auth.Country.ToLower().Contains(searchText)).ToList();
                break;
            case "State":
                filteredDealerList = DealerList.Where(auth => auth.State.ToLower().Contains(searchText)).ToList();
                break;
            case "City":
                filteredDealerList = DealerList.Where(auth => auth.City.ToLower().Contains(searchText)).ToList();
                break;
            case "Address":
                filteredDealerList = DealerList.Where(auth => auth.Address.ToLower().Contains(searchText)).ToList();
                break;
            case "Phone":
                filteredDealerList = DealerList.Where(auth => auth.Phone.ToLower().Contains(searchText)).ToList();
                break;
            default:
                Console.WriteLine("Default case");
                break;
        }
    } }