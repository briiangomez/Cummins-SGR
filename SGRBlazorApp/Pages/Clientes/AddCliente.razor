@page "/addCliente"
@using SGRBlazorApp.Data
@using SGRBlazorApp.Interfaces
@using CuriousDriveRazorLibrary
@using Blazored.LocalStorage
@using SGRBlazorApp.Shared
@inject ISgrService<Cliente> bookStoresService
@inject IUserService userService
@inject ILocalStorageService localStorageService
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@implements IDisposable
@using System.Reactive.Linq;
@using System.Reactive.Subjects
@using SGRBlazorApp.Services
@inject GeocodingService GeocodingService
@inject IJSRuntime JSRuntime

<div class="col-12">
    <h3><b>Nuevo Cliente</b></h3>
    <hr />

    <ServerValidations IsVisible="IsVisible" Result="Result">
        @RecordName
    </ServerValidations>

    <EditForm Model="@Cliente" OnValidSubmit="@SaveCliente">
        @*<DataAnnotationsValidator />*@

        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Nombre :</label>
            <input class="form-control col-3" @bind="Cliente.Nombre" placeholder="Nombre"  />
            &nbsp;<ValidationMessage For="@(() => Cliente.Nombre)" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Telefono :</label>
            <InputText class="form-control col-3" @bind-Value="Cliente.Telefono" placeholder="Telefono" />
            &nbsp;<ValidationMessage For="@(() => Cliente.Telefono)" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Celular :</label>
            <InputText class="form-control col-3" @bind-Value="Cliente.Telefono" placeholder="Telefono" />
            &nbsp;<ValidationMessage For="@(() => Cliente.Telefono)" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Email :</label>
            <InputText class="form-control col-3" @bind-Value="Cliente.Email" placeholder="Email" />
            &nbsp;<ValidationMessage For="@(() => Cliente.Email)" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Tipo de Documento :</label>
            <select class="form-control col-3" @onchange="OnChangeEvent" name="TipoDni" id="TipoDni">
                <option value="">Seleccione Tipo de Documento..</option>
                <option value="DNI">DNI</option>
                <option value="Pasaporte">Pasaporte</option>
                <option value="LE">LE</option>
                <option value="LC">LC</option>
                <option value="CUIT">CUIT</option>
            </select>
            &nbsp;<ValidationMessage For="@(() => Cliente.TipoDni)" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Nro de Documento :</label>
            <InputText class="form-control col-3" @bind-Value="Cliente.Dni" placeholder="DNI" @oninput="(EventArgs) => {SetValue(EventArgs.Value.ToString());}"  />
            &nbsp;<ValidationMessage For="@(() => Cliente.Dni)" />
        </div>

        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Direccion :</label>
            <div class="col-3">
                <Radzen.Blazor.RadzenTextBox @bind-Value="@(Cliente.Direccion)" Placeholder="Direccion:" Name="Address" style="width: 100%" @oninput="onTextChanged"></Radzen.Blazor.RadzenTextBox>
            </div>
        </div>
        <br />
        <div class="col-12 row">
            <InputNumber class="form-control col-3" @bind-Value="Cliente.LatitudGpsContacto" Style="visibility:hidden" Name="LatitudGps" placeholder="State" />
            <InputNumber class="form-control col-3" @bind-Value="Cliente.LongitudGpsContacto" Style="visibility:hidden" Name="LongitudGps" placeholder="State" />

            @if (IsLoading)
            {
                <Radzen.Blazor.RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin: 100%"></Radzen.Blazor.RadzenProgressBar>
            }

            @if (Results.Length > 0)
            {
                <Radzen.Blazor.RadzenGrid Data="Results" RowSelect="@OnRowSelect" TItem="GeocodingResult">
                    <Columns>
                        <Radzen.Blazor.RadzenGridColumn Width="200px" TItem="GeocodingResult" Property="FormattedAddress" Title="Address">
                            <FooterTemplate>
                                Total Results: <b>@Results.Count()</b>
                            </FooterTemplate>
                        </Radzen.Blazor.RadzenGridColumn>
                    </Columns>
                </Radzen.Blazor.RadzenGrid>
            }


            @if (showMap)
            {
                <br />
                <Radzen.Blazor.RadzenGoogleMap Zoom="@zoom"
                                               style="height:400px;width:100%"
                                               ApiKey="AIzaSyCBhlrEoE5ndgXMCeI7zyq0dK4MJksa8Ak"
                                               Center="@(posMap)"
                                               MapClick="@MapClick">
                    <Markers>
                        @if (pos != null)
                        {
                            <Radzen.Blazor.RadzenGoogleMapMarker Title="@Address" Label="@Address" Position="@(pos)" />
                        }
                    </Markers>
                </Radzen.Blazor.RadzenGoogleMap>
            }
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Localidad :</label>
            <InputText class="form-control col-3" @bind-Value="Cliente.Localidad" placeholder="Localidad" />
            &nbsp;<ValidationMessage For="@(() => Cliente.Localidad)" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Provincia :</label>
            <InputText class="form-control col-3" @bind-Value="Cliente.Provincia" placeholder="Provincia" />
            &nbsp;<ValidationMessage For="@(() => Cliente.Provincia)" />
        </div>
        <div class="col-12 row">
            <span class="col-2"></span>
            <input type="submit" class="col-1 btn btn-primary" value="Guardar" />
            <span>&nbsp;</span>
            <a class="col-1 btn btn-primary" href="/Clientes">Cancelar</a>
        </div>
    </EditForm>
</div>
<br />


@code
{
    public Cliente Cliente { get; set; }
    public bool IsVisible { get; set; }
    public bool Result { get; set; }
    public bool haveDNI { get; set; }
    public string TipoDNI { get; set; }
    public string RecordName { get; set; }
    public List<Cliente> ClienteList { get; set; }


    private void OnChangeEvent(ChangeEventArgs changeEventArgs)
    {
        TipoDNI = (string)changeEventArgs.Value;
    }

    private async void SetValue(string Value)
    {
        if (ClienteList.Where(o => o.Dni == Value).Count() > 0)
        {
            await JSRuntime.MostrarMensaje("Error!", "El DNI Ingresado ya se encuentra registrado", TipoMensajeSweetAlert.error);
            Cliente.Dni = String.Empty;
        }
        else
        {
            haveDNI = false;
        }
    }

    Subject<string> addressSubject = new Subject<string>();

    protected override void OnInitialized()
    {
        Console.WriteLine("Clientes - OnInitialized");
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Clientes - OnInitializedAsync");

        Cliente = new Cliente();
        ClienteList = new List<Cliente>();
        await LoadClientes();
        await base.OnInitializedAsync();
        haveDNI = false;
        addressSubject
            .Throttle(TimeSpan.FromMilliseconds(300))
            .DistinctUntilChanged()
            .Subscribe(OnAddressChanged);
    }

    private async Task LoadClientes()
    {
        await Task.Delay(500);

        ClienteList = await bookStoresService.GetAllAsync("Clientes/GetClientes");

        if (ClienteList == null)
        {

            RefreshRequest refreshRequest = new RefreshRequest();
            refreshRequest.AccessToken = await localStorageService.GetItemAsync<string>("accessToken");
            refreshRequest.RefreshToken = await localStorageService.GetItemAsync<string>("refreshToken");
            var user1 = await userService.RefreshTokenAsync(refreshRequest);
            await localStorageService.SetItemAsync("accessToken", user1.AccessToken);

            ClienteList = await bookStoresService.GetAllAsync("Clientes/GetClientes");
        }

        //if (ClienteList != null)
        //    ClienteList = ClienteList.OrderByDescending(auth => auth.ClienteId).ToList();

        StateHasChanged();
    }


    public void Dispose()
    {
        Console.WriteLine("Clientes - Dispose");
    }

    private async Task SaveCliente()
    {
        await bookStoresService.SaveAsync("Clientes/CreateClientes", Cliente);

        Result = true;
        IsVisible = true;

        var firstName = Cliente.Nombre;
        var lastName = Cliente.Nombre;

        RecordName = firstName + " " + lastName;

        Cliente = new Cliente();

        navigationManager.NavigateTo("/Clientes");
    }

    int zoom = 5;

    bool showMap;

    public GoogleMapPosition pos;

    public GoogleMapPosition posMap = new GoogleMapPosition() { Lat = -34.29403345819787, Lng = -64.03364269523182 };

    public double? latitud;

    public double? longitud;

    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    void MapClick(GoogleMapClickEventArgs args)
    {
        events.Add(DateTime.Now, $"Map clicked at Lat: {args.Position.Lat}, Lng: {args.Position.Lng}");
        StateHasChanged();
    }


    public string Address { get; set; }

    public string GeoLocation { get; set; }

    public bool IsLoading { get; set; }

    private GeocodingResult[] Results { get; set; } = new GeocodingResult[0];

    void onTextChanged(ChangeEventArgs args)
    {
        addressSubject.OnNext(args.Value.ToString());
    }


    private void OnRowSelect(GeocodingResult row)
    {
        Address = row.FormattedAddress;
        GeoLocation = $"Lat:{row.Geometry.Location.Lat}, Lng: {row.Geometry.Location.Lng}";
        Results = new GeocodingResult[0];
        pos = new GoogleMapPosition() { Lat = row.Geometry.Location.Lat, Lng = row.Geometry.Location.Lng };
        posMap = new GoogleMapPosition() { Lat = row.Geometry.Location.Lat, Lng = row.Geometry.Location.Lng };
        Cliente.LatitudGpsContacto = (long)row.Geometry.Location.Lat;
        Cliente.LongitudGpsContacto = (long)row.Geometry.Location.Lng;
        zoom = 16;
        showMap = true;
        StateHasChanged();
    }

    private async void OnAddressChanged(string address)
    {
        Address = address;
        IsLoading = true;
        GeoLocation = "";
        await InvokeAsync(() => StateHasChanged());

        var response = await GeocodingService.FindAsync(address);
        Results = response.Results;

        IsLoading = false;

        await InvokeAsync(() => StateHasChanged());
    }
}
