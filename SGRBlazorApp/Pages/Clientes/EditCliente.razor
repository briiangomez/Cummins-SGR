@page "/editCliente/{Id:guid}"
@using SGRBlazorApp.Data
@using SGRBlazorApp.Interfaces
@using CuriousDriveRazorLibrary
@using Blazored.LocalStorage
@using SGRBlazorApp.Shared
@inject ISgrService<Cliente> bookStoresService
@inject IUserService userService
@inject ILocalStorageService localStorageService
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@implements IDisposable
@using System.Reactive.Linq;
@using System.Reactive.Subjects
@using SGRBlazorApp.Services
@inject GeocodingService GeocodingService
<div class="col-12">
    <h3><b>Editar Cliente</b></h3>
    <hr />

    <ServerValidations IsVisible="IsVisible" Result="Result">
        @RecordName
    </ServerValidations>

    <EditForm Model="@Cliente" OnValidSubmit="@SaveCliente">
        @*<DataAnnotationsValidator />*@

        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Nombre :</label>
            <input class="form-control col-3" @bind="Cliente.Nombre" placeholder="Nombre" required />
            &nbsp;<ValidationMessage For="@(() => Cliente.Nombre)" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Telefono :</label>
            <InputText class="form-control col-3" @bind-Value="Cliente.Telefono" placeholder="Telefono" required />
            &nbsp;<ValidationMessage For="@(() => Cliente.Telefono)" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Celular :</label>
            <InputText class="form-control col-3" @bind-Value="Cliente.Telefono" placeholder="Telefono Celular" required />
            &nbsp;<ValidationMessage For="@(() => Cliente.Telefono)" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Email :</label>
            <InputText class="form-control col-3" @bind-Value="Cliente.Email" placeholder="Email" required />
            &nbsp;<ValidationMessage For="@(() => Cliente.Email)" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Tipo de Documento :</label>
            <select class="form-control col-3" @onchange="OnChangeEvent" name="TipoDni" id="TipoDni" required>
                <option value="">Seleccionar..</option>
                <option value="DNI">DNI</option>
                <option value="Pasaporte">Pasaporte</option>
                <option value="LE">LE</option>
                <option value="LC">LC</option>
                <option value="CUIT">CUIT</option>
            </select>
            &nbsp;<ValidationMessage For="@(() => Cliente.TipoDni)" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Nro de Documento :</label>
            <InputText class="form-control col-3" @bind-Value="Cliente.Dni" placeholder="DNI" required />
            &nbsp;<ValidationMessage For="@(() => Cliente.Dni)" />
        </div>
        <br />

        <div class="col-12 row">
            <AutocompleteBing></AutocompleteBing>
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Localidad :</label>
            <InputText class="form-control col-3" @bind-Value="Cliente.Localidad" placeholder="Localidad" />
            &nbsp;<ValidationMessage For="@(() => Cliente.Localidad)" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Provincia :</label>
            <InputText class="form-control col-3" @bind-Value="Cliente.Provincia" placeholder="Provincia" />
            &nbsp;<ValidationMessage For="@(() => Cliente.Provincia)" />
        </div>
        <br />
        <div class="col-12 row">
            <span class="col-2"></span>
            <input type="submit" class="btn btn-success" value="Guardar" />
            <span>&nbsp;</span>
            <a style="background-color:red;color:white" class="btn btn-success" href="/Clientes">Cancelar</a>
        </div>
    </EditForm>
</div>
 


@code
{
    [Parameter]
    public Guid Id { get; set; }
    public Cliente Cliente { get; set; }
    public bool IsVisible { get; set; }
    public bool Result { get; set; }
    public string TipoDNI { get; set; }
    public string RecordName { get; set; }
    public List<CarPoint> posiciones { get; set; }


    private void OnChangeEvent(ChangeEventArgs changeEventArgs)
    {
        TipoDNI = (string)changeEventArgs.Value;
    }

    Subject<string> addressSubject = new Subject<string>();

    protected async override void OnInitialized()
    {
        Cliente = await bookStoresService.GetByIdAsync("Clientes/GetClientes/", Id);
        base.OnInitialized();
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    ClaimsPrincipal user;

    bool IsUserAuthenticated;
    bool IsPublisher;
    bool IsSeniorEmployee;

    public int Count { get; set; } = 400;

    private SGRBlazorApp.Data.User users;

    protected override async Task OnInitializedAsync()
    {
        user = (await authenticationStateTask).User;

        if (!user.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/");
        }
        Console.WriteLine("Clientes - OnInitializedAsync");

        Cliente = new Cliente();
        Cliente = await bookStoresService.GetByIdAsync("Clientes/GetClientes/", Id);
        await base.OnInitializedAsync();

        addressSubject
            .Throttle(TimeSpan.FromMilliseconds(300))
            .DistinctUntilChanged()
            .Subscribe(OnAddressChanged);
    }

    public void Dispose()
    {
        Console.WriteLine("Clientes - Dispose");
    }

    private async Task SaveCliente()
    {
        try
        {
            string lat = await JSRuntime.InvokeAsync<string>("getValue", "Lat");
            string longi = await JSRuntime.InvokeAsync<string>("getValue", "Long");
            string dire = await JSRuntime.InvokeAsync<string>("getValue", "Dir");
            Cliente.Direccion = dire;
            System.Globalization.NumberFormatInfo formatProvider = new System.Globalization.NumberFormatInfo();
            formatProvider.NumberDecimalSeparator = ".";
            formatProvider.NumberGroupSeparator = ",";
            formatProvider.NumberGroupSizes = new int[] { 2 };
            if (!String.IsNullOrEmpty(lat))
            {
                Cliente.LatitudGpsContacto = Convert.ToDouble(lat, formatProvider);
            }
            if (!String.IsNullOrEmpty(longi))
            {
                Cliente.LongitudGpsContacto = Convert.ToDouble(longi, formatProvider);
            }
            await bookStoresService.UpdateAsync("Clientes/UpdateClientes/", Cliente.Id, Cliente);


            Result = true;
            IsVisible = true;

            var firstName = Cliente.Nombre;
            var lastName = Cliente.Nombre;

            RecordName = firstName + " " + lastName;

            Cliente = new Cliente();

            navigationManager.NavigateTo("/Clientes");
        }
        catch (Exception ex)
        {
            await JSRuntime.MostrarMensaje("Error!", "Ocurrio un error actualizando, por favor intente nuevamente!", TipoMensajeSweetAlert.error);
            Logger.AddLine(String.Format("{0}-{1}-{2}", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
        }
    }

    int zoom = 5;

    bool showMap;

    public GoogleMapPosition pos;

    public GoogleMapPosition posMap = new GoogleMapPosition() { Lat = -34.29403345819787, Lng = -64.03364269523182 };

    public double? latitud;

    public double? longitud;

    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    void MapClick(GoogleMapClickEventArgs args)
    {
        events.Add(DateTime.Now, $"Map clicked at Lat: {args.Position.Lat}, Lng: {args.Position.Lng}");
        StateHasChanged();
    }


    public string Address { get; set; }

    public string GeoLocation { get; set; }

    public bool IsLoading { get; set; }

    private GeocodingResult[] Results { get; set; } = new GeocodingResult[0];

    void onTextChanged(ChangeEventArgs args)
    {
        addressSubject.OnNext(args.Value.ToString());
    }


    private void OnRowSelect(GeocodingResult row)
    {
        Address = row.FormattedAddress;
        GeoLocation = $"Lat:{row.Geometry.Location.Lat}, Lng: {row.Geometry.Location.Lng}";
        Results = new GeocodingResult[0];
        pos = new GoogleMapPosition() { Lat = row.Geometry.Location.Lat, Lng = row.Geometry.Location.Lng };
        posMap = new GoogleMapPosition() { Lat = row.Geometry.Location.Lat, Lng = row.Geometry.Location.Lng };
        Cliente.LatitudGpsContacto = (long)row.Geometry.Location.Lat;
        Cliente.LongitudGpsContacto = (long)row.Geometry.Location.Lng;
        Cliente.Direccion = Address;
        posiciones = new List<CarPoint>()
{
            new CarPoint(){ name = row.FormattedAddress, Lat = row.Geometry.Location.Lat, Long = row.Geometry.Location.Lng }
        };
        zoom = 16;
        showMap = true;
        StateHasChanged();
    }

    private async void OnAddressChanged(string address)
    {
        Address = address;
        IsLoading = true;
        GeoLocation = "";
        await InvokeAsync(() => StateHasChanged());

        var response = await GeocodingService.FindAsync(address);
        Results = response.Results;

        IsLoading = false;

        await InvokeAsync(() => StateHasChanged());
    }
}
