@using System.Linq;
@using SGRBlazorApp.Data;
@using SGRBlazorApp.Interfaces;
@using System.Security.Claims
@using Blazored.LocalStorage
@inject ISgrService<Survey> bookStoresService
@inject ISgrService<SurveyItem> itemService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Radzen.DialogService dialogService
@inject IUserService userService
@inject ILocalStorageService localStorageService
@inject NavigationManager NavigationManager


@strError
<RadzenCard Style="margin-bottom: 20px;">
    <div class="row">
        <div class="col-md-12">
            <div>Nombre:</div>
            <RadzenTextBox @bind-Value="SelectedSurvey.SurveyName" Style="width: 400px" />
            <br />
        </div>
    </div>
</RadzenCard>
<RadzenButton Click="UpdateSurvey"
              Text="Guardar" ButtonStyle="ButtonStyle.Success"
              Style="margin-bottom: 10px; width: 150px" />
@if (SelectedSurvey.Id != Guid.Empty)
{
    <RadzenButton Click="DeleteSurveyDialog"
                  ButtonStyle="ButtonStyle.Danger"
                  Text="Eliminar"
                  Style="margin-bottom: 10px; width: 150px" />
}
@code {
    [Parameter]
    public Survey SelectedSurvey { get; set; }

    string strError = "";
    Guid UserId = Guid.Empty;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    ClaimsPrincipal user;

    public SGRBlazorApp.Data.User user1 { get; set; }
    public RefreshRequest refreshRequest { get; set; }
    bool IsUserAuthenticated;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = (await authenticationStateTask).User;

            if (user.Identity.IsAuthenticated)
                IsUserAuthenticated = true;

            refreshRequest = new RefreshRequest();
            refreshRequest.AccessToken = await localStorageService.GetItemAsync<string>("accessToken");
            refreshRequest.RefreshToken = await localStorageService.GetItemAsync<string>("refreshToken");
            user1 = await userService.RefreshTokenAsync(refreshRequest);
            UserId = user1.Id;
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }

    async Task UpdateSurvey()
    {
        SelectedSurvey.UserId = UserId;

        try
        {
            if (SelectedSurvey.Id == Guid.Empty)
            {
                SelectedSurvey = await bookStoresService.SaveAsync("Survey/CreateSurvey", SelectedSurvey);
            }
            else
            {
                await bookStoresService.UpdateAsync("Survey/UpdateSurvey/", SelectedSurvey.Id, SelectedSurvey);
            }

            dialogService.Close(SelectedSurvey);

            NavigationManager.NavigateTo("/surveyadmin");
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }

    async Task DeleteSurveyDialog() => await dialogService
     .OpenAsync("Delete Survey", ds =>
    @<RadzenCard Style="padding: 20px;">
        <p Style="margin-bottom: 10px;">Confirm?</p>
        <div class="row">
            <div class="col-md-12">
                <RadzenButton Text="Yes" Click="DeleteSurvey"
                              Style="margin-bottom: 10px; width: 150px" />
                <RadzenButton Text="No" Click="()=> ds.Close(false)"
                              ButtonStyle="ButtonStyle.Secondary"
                              Style="margin-bottom: 10px; width: 150px" />
            </div>
        </div>
    </RadzenCard>);

async Task DeleteSurvey()
{
var result = await bookStoresService.DeleteAsync("Survey/DeleteSurvey/", SelectedSurvey.Id);

dialogService.Close(SelectedSurvey.Id);
dialogService.Close(SelectedSurvey.Id);
}
}
