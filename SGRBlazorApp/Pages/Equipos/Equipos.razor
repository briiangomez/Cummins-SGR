@page "/equipos"
@using SGRBlazorApp.Data
@using SGRBlazorApp.Interfaces
@using CuriousDriveRazorLibrary
@using Blazored.LocalStorage
@using SGRBlazorApp.Shared
@inject ISgrService<Motor> bookStoresService
@inject IUserService userService
@inject ILocalStorageService localStorageService
@inject IJSRuntime JSRuntime
@implements IDisposable

    <div class="col-12">

        <h3><b>Motores</b></h3>
        <br />
        <AuthorizeView Roles="Administrador" Policy="SeniorEmployee">
            <Authorized>
                <a class="btn btn-primary" style="text-underline-position:below; cursor:pointer; color:blue" href="/addEquipo">Nuevo Cliente</a>
            </Authorized>
        </AuthorizeView>
        <br />
        <SpinLoader IsLoading="isLoading">
            <LoadingTemplate>
                <div class="col-12" style="background-color: lightgray; height:400px; vertical-align:middle">
                    <br /><br />
                    <Chase Center="true" Color="#c21f13" Size="70px"></Chase>
                </div>
            </LoadingTemplate>
            <ContentTemplate>
                @if (filteredEquipoList != null)
                {
                    <GridView Items="filteredEquipoList" ReloadList="IsGridViewFiltered">
                        <GridColumns>
                            <GridColumn ColumnTitle="NumeroMotor"
                                        OnSearchTextChanged="@(e => OnMotorearchTextChanged(e, "NumeroMotor"))"></GridColumn>
                            <GridColumn ColumnTitle="Modelo"
                                        OnSearchTextChanged="@(e => OnMotorearchTextChanged(e, "Modelo"))"></GridColumn>
                            <GridColumn ColumnTitle="Equipo"
                                        OnSearchTextChanged="@(e => OnMotorearchTextChanged(e, "Equipo"))"></GridColumn>
                            <AuthorizeView Roles="Administrador" Policy="SeniorEmployee">
                                <Authorized>
                                    <GridColumn ColumnTitle="Actions"></GridColumn>
                                </Authorized>
                            </AuthorizeView>
                        </GridColumns>
                        <GridRow Context="Equipo">
                            @*<td>
                                <NavLink href=@string.Format("/Motor/Equipodetail/{0}", @Equipo.Id)>
                                    @Equipo.Id
                                </NavLink>
                            </td>*@
                            <td>@Equipo.NumeroMotor</td>
                            <td>@Equipo.Modelo</td>
                            <td>@Equipo.Equipo</td>
                            <AuthorizeView Roles="Administrador" Policy="SeniorEmployee">
                                <Authorized>
                                    <th>
                                        <a style="text-underline-position:below; cursor:pointer; color:blue" href=@string.Format("/editMotor/{0}", Equipo.Id)>Edit</a> |
                                        <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => DeleteEquipo(Equipo.Id))">Delete</a>
                                    </th>
                                </Authorized>
                            </AuthorizeView>
                        </GridRow>
                    </GridView>
                }
            </ContentTemplate>
        </SpinLoader>
    </div>

@code {

    public Motor Equipo { get; set; }
    public List<Motor> EquipoList { get; set; }
    public List<Motor> filteredEquipoList { get; set; }
    public string SelectedCity { get; set; }

    public bool IsVisible { get; set; }
    public bool Result { get; set; }
    public string RecordName { get; set; }
    public string[] Cities { get; set; }
    public bool IsGridViewFiltered { get; set; }
    bool isLoading = true;

    ElementReference firstNameTextBox;

    protected override void OnInitialized()
    {
        Console.WriteLine("Motor - OnInitialized");
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Motor - OnInitializedAsync");

        Equipo = new Motor();
        EquipoList = new List<Motor>();
        //EquipoList = await Motorervice.GetMotor();

        await base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("Motor - OnParametersSet");
        base.OnParametersSet();
    }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("Motor - OnParametersSetAsync");
        await base.OnParametersSetAsync();
    }

    protected override bool ShouldRender()
    {
        base.ShouldRender();
        Console.WriteLine("Motor - ShouldRender");

        return true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("Motor - OnAfterRender - firstRender = " + firstRender);
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Motor - OnAfterRenderAsync - firstRender = " + firstRender);

        if (firstRender)
        {
            await LoadMotor();

            isLoading = false;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        Console.WriteLine("Motor - Dispose");
    }

    private async Task LoadMotor()
    {
        await Task.Delay(500);

        EquipoList = filteredEquipoList = await bookStoresService.GetAllAsync("Motor/GetMotor");

        if (EquipoList == null)
        {

            RefreshRequest refreshRequest = new RefreshRequest();
            refreshRequest.AccessToken = await localStorageService.GetItemAsync<string>("accessToken");
            refreshRequest.RefreshToken = await localStorageService.GetItemAsync<string>("refreshToken");
            var user1 = await userService.RefreshTokenAsync(refreshRequest);
            await localStorageService.SetItemAsync("accessToken", user1.AccessToken);

            EquipoList = filteredEquipoList = await bookStoresService.GetAllAsync("Motor/GetMotor");
        }

        //if (EquipoList != null)
        //    EquipoList = EquipoList.OrderByDescending(auth => auth.EquipoId).ToList();

        StateHasChanged();
    }



    private async Task DeleteEquipo(Guid EquipoId)
    {
        var confirmado = await JSRuntime.Confirmar("Atencion!","¿Desea eliminar el Equipo?",TipoMensajeSweetAlert.warning);
        if (confirmado)
        {
            await bookStoresService.DeleteAsync("Motor/DeleteMotor/", EquipoId);
            await LoadMotor();
        }
        //throw new Exception("DeleteEquipo");
    }

    private void EditEquipo(Motor argEquipo)
    {
        Equipo = argEquipo;
    }

    private void OnSelectCityChange(ChangeEventArgs changeEventArgs)
    {
        SelectedCity = (string)changeEventArgs.Value;
    }

    private void OnMotorearchTextChanged(ChangeEventArgs changeEventArgs, string columnTitle)
    {
        string searchText = changeEventArgs.Value.ToString();
        IsGridViewFiltered = true;

        switch (columnTitle)
        {
            case "NumeroMotor":
                filteredEquipoList = EquipoList.Where(auth => auth.NumeroMotor.ToLower().Contains(searchText)).ToList();
                break;
            case "Modelo":
                filteredEquipoList = EquipoList.Where(auth => auth.Modelo.ToLower().Contains(searchText)).ToList();
                break;
            case "Equipo":
                filteredEquipoList = EquipoList.Where(auth => auth.Equipo.ToLower().Contains(searchText)).ToList();
                break;
            default:
                Console.WriteLine("Default case");
                break;
        }
    }

}