@page "/addEquipo"
@using SGRBlazorApp.Data
@using SGRBlazorApp.Interfaces
@using CuriousDriveRazorLibrary
@using Blazored.LocalStorage
@inject ILocalStorageService localStorageService
@inject ISgrService<Equipo> bookStoresService
@inject ISgrService<Certificacion> certificacionService
@inject ISgrService<CertificacionMotor> certificacionMotService
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@implements IDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ISgrService<Oem> oemService
@inject ISgrService<Motor> motorService
<div class="col-12">
    <h3><b>Agregar Nuevo Equipo</b></h3>
    <hr />

    <ServerValidations IsVisible="IsVisible" Result="Result">
        @RecordName
    </ServerValidations>

    <EditForm Model="@Motor" OnValidSubmit="@SaveMotor">

        <br />
        <div class="col-12 row">
            <label class="col-4 font-weight-bold">OEM :</label>
            <select class="form-control col-5" @onchange="OnChangeEvent" name="IdOem" id="IdOem" required>
                <option value="">Seleccione OEM...</option>
                @if (OemList != null)
                {
                    foreach (var item in OemList.OrderBy(o => o.Nombre))
                    {
                        <option value="@item.Id">@item.Nombre</option>
                    }
                }
            </select>
            <div class="col-3">
                <a class="btn btn-primary" style="text-underline-position:below; cursor:pointer; " href="/addOem">Nuevo OEM</a>
            </div>
            &nbsp;<ValidationMessage For="@(() => Motor.Oemid)" />
        </div>
        <br />

        <div class="col-12 row">
            <label class="col-4 font-weight-bold">Modelo de OEM:</label>
            <InputText class="form-control col-8" @bind-Value="Motor.Modelo" placeholder="Modelo de OEM" required />

            &nbsp;<ValidationMessage For="@(() => Motor.Modelo)" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-4 font-weight-bold">Motor :</label>
            <select class="form-control col-8" @onchange="OnChangeEvent2" name="MotorId" id="MotorId" required>
                <option value="">Seleccione Motor...</option>
                @if (Motores != null)
                {
                    foreach (var item in Motores.OrderBy(o => o.Codigo))
                    {
                        <option value="@item.Id">@item.Codigo</option>
                    }
                }
            </select>
        </div>
        @*<br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Certificaciones :</label>
            <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value=@multipleValues Multiple="true" Data=@CertificacionList
                           TextProperty="Descripcion" ValueProperty="IdStr" Change=@(args => OnChange(args, "ListBox with multiple selection")) Style="height:300px;width:100%" />
        </div>*@
        @*<div class="col-12 row">
            <label class="col-4 font-weight-bold">Certificacion :</label>
            <select class="form-control col-8" @onchange="OnChangeEventCert" name="IdOem" id="IdOem">
                <option value="">Seleccione OEM...</option>
                @if (CertificacionList != null)
                {
                    foreach (var item in CertificacionList.OrderBy(o => o.Descripcion))
                    {
                        <option value="@item.Id">@item.Descripcion</option>
                    }
                }
            </select>
            &nbsp;<ValidationMessage For="@(() => Motor.Oemid)" />
        </div>*@
        <br />
        <div class="col-12 row">
            <span class="col-2"></span>
            <input type="submit" class="btn btn-success" value="Guardar" />
            <span>&nbsp;</span>
            <a style="background-color:red;color:white" class="btn btn-success" href="/Equipos">Cancelar</a>
        </div>
    </EditForm>
</div>
<br />


@code
{
    public Equipo Motor { get; set; }
    public bool IsVisible { get; set; }
    public bool Result { get; set; }
    public string RecordName { get; set; }
    public List<Oem> OemList { get; set; }
    public List<string> CertsIds = new List<string>();
    public List<Certificacion> CertificacionList { get; set; }
    public Guid IdOem = Guid.Empty;
    public List<Motor> Motores { get; set; }

    public Guid IdMotor = Guid.Empty;
    public Guid IdCert = Guid.Empty;
    IEnumerable<string> multipleValues = new string[] { };
    string certs = "";
    public void Dispose()
    {
        Console.WriteLine("Motors - Dispose");
    }

    private void OnChangeEvent(ChangeEventArgs changeEventArgs)
    {

        if (!String.IsNullOrEmpty((string)changeEventArgs.Value) && (string)changeEventArgs.Value != "Seleccione OEM...")
        {
            IdOem = Guid.Parse((string)changeEventArgs.Value);
        }
    }

    private void OnChangeEvent2(ChangeEventArgs changeEventArgs)
    {

        if (!String.IsNullOrEmpty((string)changeEventArgs.Value) && (string)changeEventArgs.Value != "Seleccione Motor...")
        {
            IdMotor = Guid.Parse((string)changeEventArgs.Value);
        }
    }

    private void OnChangeEventCert(ChangeEventArgs changeEventArgs)
    {

        if (!String.IsNullOrEmpty((string)changeEventArgs.Value) && (string)changeEventArgs.Value != "Seleccione Certificacion...")
        {
            IdCert = Guid.Parse((string)changeEventArgs.Value);
        }
    }

    void OnChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        certs = (string)str;
    }

    private Dictionary<string, object> htmlAttribute { get; set; } = new Dictionary<string, object>() {
            {"maxlength", "8" }
            };

    //private async void OnChange(KeyboardEventArgs e)
    //{
    //    if(!String.IsNullOrEmpty(Motor.NumeroMotor))
    //    {
    //        if (Motor.NumeroMotor.Length > 7)
    //        {
    //            await JSRuntime.MostrarMensaje("Error!", "El Numero de Motor no puede ser mayor a 8 caracteres", TipoMensajeSweetAlert.error);
    //            Motor.NumeroMotor = Motor.NumeroMotor.Substring(0,8);
    //        }
    //    }
    //}

    //string stringValue = "";

    //private async Task SetValue(string Value)
    //{
    //    if (Value.Length > 7)
    //    {
    //        await JSRuntime.MostrarMensaje("Error!", "El Numero de Motor no puede ser mayor a 8 caracteres", TipoMensajeSweetAlert.error);
    //        Motor.NumeroMotor = Value.Substring(0,8);
    //    }
    //    else
    //    {
    //        stringValue = Value;

    //    }
    //}

    protected override void OnInitialized()
    {
        Console.WriteLine("Clientes - OnInitialized");
        base.OnInitialized();
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    ClaimsPrincipal user;

    bool IsUserAuthenticated;
    bool IsPublisher;
    bool IsSeniorEmployee;

    public int Count { get; set; } = 400;

    private SGRBlazorApp.Data.User users;

    protected override async Task OnInitializedAsync()
    {
        user = (await authenticationStateTask).User;

        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
        Motor = new Equipo();
        Console.WriteLine("Clientes - OnInitializedAsync");
        OemList = await oemService.GetAllAsync("Oems/GetOems");
        Motores = await motorService.GetAllAsync("Motor/GetMotor");
        CertificacionList = await certificacionService.GetAllAsync("Certificacion/GetCertificacion");
        await base.OnInitializedAsync();
    }

    private async Task SaveMotor()
    {
        try
        {
            //Motor = new Motor();
            if (IdOem != Guid.Empty)
            {
                Motor.Oemid = IdOem;
            }
            if (IdMotor != Guid.Empty)
            {
                Motor.MotorId = IdMotor;
            }
            //if (Motor.NumeroMotor.Length < 8)
            //{
            //    Motor.NumeroMotor = Motor.NumeroMotor.PadLeft(8, '0');
            //    //Motor.NumeroMotor = Motor.NumeroMotor.ToString("00000000");
            //    //Motor.NumeroMotor = Motor.NumeroMotor.ToString("D8");
            //}
            var mots = await bookStoresService.SaveAsync("Equipo/CreateEquipo", Motor);
            Result = true;
            IsVisible = true;

            var firstName = Motor.NumeroMotor;
            var lastName = Motor.Equipo1;

            RecordName = firstName + " " + lastName;

            if (!String.IsNullOrEmpty(certs))
            {
                var datos = certs.Split(',');
                foreach (var item in datos)
                {
                    if (!String.IsNullOrEmpty(item))
                    {
                        Guid IdCer = Guid.Parse(item);
                        CertificacionMotor cert = new CertificacionMotor();
                        cert.MotorId = mots.Id;
                        cert.CertificacionId = IdCer;
                        await certificacionMotService.SaveAsync("CertificacionMotor/CreateCertificacionMotor", cert);
                    }
                }
            }

            Motor = new Equipo();

            navigationManager.NavigateTo("/Equipos");
        }
        catch (Exception ex)
        {
            await JSRuntime.MostrarMensaje("Error!", "Ocurrio un error actualizando, por favor intente nuevamente!", TipoMensajeSweetAlert.error);
            Logger.AddLine(String.Format("{0}-{1}-{2}", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
        }
    }
}
