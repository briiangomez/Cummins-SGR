@page "/addEquipo"
@using SGRBlazorApp.Data
@using SGRBlazorApp.Interfaces
@using CuriousDriveRazorLibrary
@using Blazored.LocalStorage
@inject ILocalStorageService localStorageService
@inject ISgrService<Motor> bookStoresService
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@implements IDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
<div class="col-12">
    <h3><b>Enter Motor Information</b></h3>
    <hr />

    <ServerValidations IsVisible="IsVisible" Result="Result">
        @RecordName
    </ServerValidations>

    <EditForm Model="@Motor" OnValidSubmit="@SaveMotor">
        @*<DataAnnotationsValidator />*@

        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Numero de Motor (ESN) :</label>
            <InputText class="form-control col-3" @bind-Value="Motor.NumeroMotor" @attributes="htmlAttribute" placeholder="Name"  />
            &nbsp;<ValidationMessage For="@(() => Motor.NumeroMotor)" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Modelo de OEM:</label>
            <InputText class="form-control col-3" @bind-Value="Motor.Modelo" placeholder="Location Code" />
            &nbsp;<ValidationMessage For="@(() => Motor.Modelo)" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Equipo :</label>
            <InputText class="form-control col-3" @bind-Value="Motor.Equipo" placeholder="Distributor Code" />
            &nbsp;<ValidationMessage For="@(() => Motor.Equipo)" />
        </div>
        <div class="col-12 row">
            <span class="col-2"></span>
            <input type="submit" class="col-1 btn btn-primary" value="Guardar" />
            <span>&nbsp;</span>
            <a class="col-1 btn btn-primary" href="/Equipos">Cancelar</a>
        </div>
    </EditForm>
</div>
<br />


@code
{
    public Motor Motor { get; set; }
    public bool IsVisible { get; set; }
    public bool Result { get; set; }
    public string RecordName { get; set; }

    public void Dispose()
    {
        Console.WriteLine("Motors - Dispose");
    }

    private Dictionary<string, object> htmlAttribute { get; set; } = new Dictionary<string, object>() {
            {"maxlength", "8" }
            };

    //private async void OnChange(KeyboardEventArgs e)
    //{
    //    if(!String.IsNullOrEmpty(Motor.NumeroMotor))
    //    {
    //        if (Motor.NumeroMotor.Length > 7)
    //        {
    //            await JSRuntime.MostrarMensaje("Error!", "El Numero de Motor no puede ser mayor a 8 caracteres", TipoMensajeSweetAlert.error);
    //            Motor.NumeroMotor = Motor.NumeroMotor.Substring(0,8);
    //        }
    //    }
    //}

    //string stringValue = "";

    //private async Task SetValue(string Value)
    //{
    //    if (Value.Length > 7)
    //    {
    //        await JSRuntime.MostrarMensaje("Error!", "El Numero de Motor no puede ser mayor a 8 caracteres", TipoMensajeSweetAlert.error);
    //        Motor.NumeroMotor = Value.Substring(0,8);
    //    }
    //    else
    //    {
    //        stringValue = Value;

    //    }
    //}

    protected override void OnInitialized()
    {
        Console.WriteLine("Clientes - OnInitialized");
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Clientes - OnInitializedAsync");

        Motor = new Motor();
        await base.OnInitializedAsync();
    }

    private async Task SaveMotor()
    {
        await bookStoresService.SaveAsync("Motor/CreateMotor", Motor);

        if(Motor.NumeroMotor.Length < 8)
        {
            Motor.NumeroMotor = Motor.NumeroMotor.PadLeft(8, '0');
            //Motor.NumeroMotor = Motor.NumeroMotor.ToString("00000000");
            //Motor.NumeroMotor = Motor.NumeroMotor.ToString("D8");
        }
        Result = true;
        IsVisible = true;

        var firstName = Motor.NumeroMotor;
        var lastName = Motor.Equipo;

        RecordName = firstName + " " + lastName;

        Motor = new Motor();

        navigationManager.NavigateTo("/Equipos");
    }
}
