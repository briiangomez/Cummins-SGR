@page "/editEquipo/{Id:guid}"
@using SGRBlazorApp.Data
@using SGRBlazorApp.Interfaces
@using CuriousDriveRazorLibrary
@using Blazored.LocalStorage
@using SGRBlazorApp.Shared
@inject ISgrService<Equipo> bookStoresService
@inject IUserService userService
@inject ISgrService<Certificacion> certificacionService
@inject ISgrService<CertificacionMotor> certificacionMotService
@inject ILocalStorageService localStorageService
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@implements IDisposable
@using System.Reactive.Linq;
@using System.Reactive.Subjects
@using SGRBlazorApp.Services
@inject GeocodingService GeocodingService
@inject ISgrService<Oem> oemService
@inject ISgrService<Motor> motorService

<div class="col-12">
    <h3><b>Editar Equipo</b></h3>
    <hr />

    <ServerValidations IsVisible="IsVisible" Result="Result">
        @RecordName
    </ServerValidations>

    <EditForm Model="@Equipo" OnValidSubmit="@SaveEquipo">
        @*<DataAnnotationsValidator />*@

        @*<div class="col-12 row">
            <label class="col-4 font-weight-bold">Numero de Equipo (ESN) :</label>
            <input class="form-control col-8" @bind="Equipo.NumeroEquipo" placeholder="Name" />
            &nbsp;<ValidationMessage For="@(() => Equipo.NumeroEquipo)" />
        </div>*@
        <br />
        <div class="col-12 row">
            <label class="col-4 font-weight-bold">OEM :</label>
            <select class="form-control col-5" value="@IdOem" @onchange="OnChangeEvent" name="IdOem" id="IdOem">
                <option value="">Seleccione OEM...</option>
                @if (OemList != null)
                {
                    foreach (var item in OemList.OrderBy(o => o.Nombre))
                    {
                        <option value="@item.Id">@item.Nombre</option>
                    }
                }
            </select>
            <div class="col-3">
                <a class="btn btn-primary" style="text-underline-position:below; cursor:pointer; " href="/addOem">Nuevo OEM</a>
            </div>
            &nbsp;<ValidationMessage For="@(() => Equipo.Oemid)" />
        </div>
        <div class="col-12 row">
            <label class="col-4 font-weight-bold">Modelo de OEM:</label>
            <InputText class="form-control col-8" @bind-Value="Equipo.Modelo" placeholder="Location Code" />
            &nbsp;<ValidationMessage For="@(() => Equipo.Modelo)" />
        </div>
        <div class="col-12 row">
            <label class="col-4 font-weight-bold">Motor :</label>
            <select class="form-control col-8" value="@IdMotor" @onchange="OnChangeEvent2" name="MotorId" id="MotorId" required>
                <option value="">Seleccione Motor...</option>
                @if (Motores != null)
                {
                    foreach (var item in Motores.OrderBy(o => o.Codigo))
                    {
                        <option value="@item.Id">@item.Codigo</option>
                    }
                }
            </select>
        </div>
        @*<br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Certificaciones :</label>
            <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value=@multipleValues Multiple="true" Data=@CertificacionList
                           TextProperty="Descripcion" ValueProperty="IdStr" Change=@(args => OnChange(args, "ListBox with multiple selection")) Style="height:300px;width:100%" />
        </div>*@
        <br />
        <div class="col-12 row">
            <span class="col-2"></span>
            <input type="submit" class="btn btn-success" value="Guardar" />
            <span>&nbsp;</span>
            <a style="background-color:red;color:white" class="btn btn-success" href="/Equipos">Cancelar</a>
        </div>
    </EditForm>
</div>
<br />


@code
{
    [Parameter]
    public Guid Id { get; set; }
    public Equipo Equipo { get; set; }
    public bool IsVisible { get; set; }
    public bool Result { get; set; }
    public string RecordName { get; set; }
    public Guid IdOem = Guid.Empty;
    public List<Oem> OemList { get; set; }
    public List<Motor> Motores { get; set; }
    public Guid IdMotor = Guid.Empty;
    IEnumerable<string> multipleValues = new string[] { };
    string certs = "";
    Subject<string> addressSubject = new Subject<string>();
    public List<Certificacion> CertificacionList { get; set; }
    public Guid IdCert = Guid.Empty;
    protected async override void OnInitialized()
    {
        Equipo = await bookStoresService.GetByIdAsync("Equipo/GetEquipo/", Id);
        base.OnInitialized();
    }

    private void OnChangeEvent(ChangeEventArgs changeEventArgs)
    {

        if (!String.IsNullOrEmpty((string)changeEventArgs.Value) && (string)changeEventArgs.Value != "Seleccione OEM...")
        {
            IdOem = Guid.Parse((string)changeEventArgs.Value);
        }
    }

    private void OnChangeEvent2(ChangeEventArgs changeEventArgs)
    {

        if (!String.IsNullOrEmpty((string)changeEventArgs.Value) && (string)changeEventArgs.Value != "Seleccione Motor...")
        {
            IdMotor = Guid.Parse((string)changeEventArgs.Value);
        }
    }

    void OnChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        certs = (string)str;
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    ClaimsPrincipal user;

    bool IsUserAuthenticated;
    bool IsPublisher;
    bool IsSeniorEmployee;

    public int Count { get; set; } = 400;

    private SGRBlazorApp.Data.User users;

    protected override async Task OnInitializedAsync()
    {
        user = (await authenticationStateTask).User;

        if (!user.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/");
        }
        Console.WriteLine("Equipos - OnInitializedAsync");
        Equipo = new Equipo();
        Equipo = await bookStoresService.GetByIdAsync("Equipo/GetEquipo/", Id);
        OemList = await oemService.GetAllAsync("Oems/GetOems");
        Motores = await motorService.GetAllAsync("Motor/GetMotor");

        if (Equipo.Oemid != null)
        {
            IdOem = Equipo.Oemid.Value;
        }
        if (Equipo.MotorId != null)
        {
            IdMotor = Equipo.MotorId.Value;
        }
        CertificacionList = await certificacionService.GetAllAsync("Certificacion/GetCertificacion");
        var certsMot = await certificacionMotService.GetAllAsync("CertificacionMotor/GetCertificacionMotor");
        certsMot = certsMot.Where(o => o.MotorId == Equipo.Id).ToList();
        List<string> ls = new List<string>();
        foreach (var item in certsMot)
        {
            ls.Add(item.CertificacionId.ToString());
            certs += item.CertificacionId.ToString() + ",";
        }
        multipleValues = ls.ToArray();
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        Console.WriteLine("Equipos - Dispose");
    }

    private async Task SaveEquipo()
    {
        try
        {
            if (IdOem != Guid.Empty)
            {
                Equipo.Oemid = IdOem;
            }
            if (IdMotor != Guid.Empty)
            {
                Equipo.MotorId = IdMotor;
            }
            if (Equipo.Id == Guid.Empty)
                await bookStoresService.SaveAsync("Equipo/CreateEquipo", Equipo);
            else
                await bookStoresService.UpdateAsync("Equipo/UpdateEquipo/", Equipo.Id, Equipo);


            var certsMot = await certificacionMotService.GetAllAsync("CertificacionMotor/GetCertificacionMotor");
            certsMot = certsMot.Where(o => o.MotorId == Equipo.Id).ToList();

            foreach (var item in certsMot)
            {
                await certificacionMotService.DeleteAsync("CertificacionMotor/DeleteCertificacionMotor/", item.Id);
            }

            if (!String.IsNullOrEmpty(certs))
            {
                var datos = certs.Split(',');
                foreach (var item in datos)
                {
                    if (!String.IsNullOrEmpty(item))
                    {
                        Guid IdCer = Guid.Parse(item);
                        CertificacionMotor cert = new CertificacionMotor();
                        cert.MotorId = Equipo.Id;
                        cert.CertificacionId = IdCer;
                        await certificacionMotService.SaveAsync("CertificacionMotor/CreateCertificacionMotor", cert);
                    }
                }
            }

            Result = true;
            IsVisible = true;

            var firstName = Equipo.NumeroMotor;
            var lastName = Equipo.Motor;

            RecordName = firstName + " " + lastName;

            Equipo = new Equipo();




            navigationManager.NavigateTo("/Equipos");
        }
        catch (Exception ex)
        {
            await JSRuntime.MostrarMensaje("Error!", "Ocurrio un error actualizando, por favor intente nuevamente!", TipoMensajeSweetAlert.error);
            Logger.AddLine(String.Format("{0}-{1}-{2}", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
        }
    }

    int zoom = 5;

    bool showMap;

    public GoogleMapPosition pos;

    public GoogleMapPosition posMap = new GoogleMapPosition() { Lat = -34.29403345819787, Lng = -64.03364269523182 };

    public double? latitud;

    public double? longitud;

    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    void MapClick(GoogleMapClickEventArgs args)
    {
        events.Add(DateTime.Now, $"Map clicked at Lat: {args.Position.Lat}, Lng: {args.Position.Lng}");
        StateHasChanged();
    }


    public string Address { get; set; }

    public string GeoLocation { get; set; }

    public bool IsLoading { get; set; }

    private GeocodingResult[] Results { get; set; } = new GeocodingResult[0];

    void onTextChanged(ChangeEventArgs args)
    {
        addressSubject.OnNext(args.Value.ToString());
    }


    //private void OnRowSelect(GeocodingResult row)
    //{
    //    Address = row.FormattedAddress;
    //    GeoLocation = $"Lat:{row.Geometry.Location.Lat}, Lng: {row.Geometry.Location.Lng}";
    //    Results = new GeocodingResult[0];
    //    pos = new GoogleMapPosition() { Lat = row.Geometry.Location.Lat, Lng = row.Geometry.Location.Lng };
    //    posMap = new GoogleMapPosition() { Lat = row.Geometry.Location.Lat, Lng = row.Geometry.Location.Lng };
    //    Equipo.LatitudGps = (long)row.Geometry.Location.Lat;
    //    Equipo.LongitudGps = (long)row.Geometry.Location.Lng;
    //    zoom = 16;
    //    showMap = true;
    //    StateHasChanged();
    //}

    //private async void OnAddressChanged(string address)
    //{
    //    Address = address;
    //    IsLoading = true;
    //    GeoLocation = "";
    //    await InvokeAsync(() => StateHasChanged());

    //    var response = await GeocodingService.FindAsync(address);
    //    Results = response.Results;

    //    IsLoading = false;

    //    await InvokeAsync(() => StateHasChanged());
    //}
}
