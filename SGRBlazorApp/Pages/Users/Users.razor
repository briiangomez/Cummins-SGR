@page "/Usuarios"
@using SGRBlazorApp.Data
@using SGRBlazorApp.Interfaces
@using CuriousDriveRazorLibrary
@using Blazored.LocalStorage
@using SGRBlazorApp.Shared
@inject ISgrService<SGRBlazorApp.Data.User> bookStoresService
@inject IUserService userService
@inject ILocalStorageService localStorageService
@inject IJSRuntime JSRuntime
@implements IDisposable
@inject NavigationManager navigationManager
@inject TooltipService tooltipService

<div class="col-12">
    <h3><b>Listado de Usuarios</b></h3>
    <br />
    <AuthorizeView Roles="Administrador" Policy="SeniorEmployee">
        <Authorized>
            <a class="btn btn-primary" style="text-underline-position:below; cursor:pointer; " href="/addUser">Nuevo Usuario</a>
        </Authorized>
    </AuthorizeView>
    <br />
    <br />

    @if (isLoading)
    {
        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                        FilterMode="FilterMode.Simple" PageSize="20" AllowPaging="true" AllowSorting="true" Data="@EquipoList.OrderBy(o => o.EmailAddress).ToList()" TItem="SGRBlazorApp.Data.User" ColumnWidth="200px"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        LogicalFilterOperator="LogicalFilterOperator.Or">
            <Columns>
                <RadzenDataGridColumn TItem="SGRBlazorApp.Data.User" Property="EmailAddress" Title="Usuario" />
                <RadzenDataGridColumn TItem="SGRBlazorApp.Data.User" Property="FirstName" Title="Nombre" />
                <RadzenDataGridColumn TItem="SGRBlazorApp.Data.User" Property="LastName" Title="Apellido" />
                <RadzenDataGridColumn TItem="SGRBlazorApp.Data.User" Property="IdRoleNavigation.Descripcion" Title="Rol" />
                <RadzenDataGridColumn TItem="SGRBlazorApp.Data.User" Context="sampleBlazorModelsSampleOrder" Filterable="false" Sortable="false" TextAlign="TextAlign.Left" Title="Editar" Width="100px">
                    <Template Context="Certificacion">
                        <RadzenButton Icon="edit" Size="ButtonSize.Medium" Click="@(args => EditRow(Certificacion.Id))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="SGRBlazorApp.Data.User" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Title="Reset Pass" Width="100px">
                    <Template Context="Certificacion">
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="autorenew" Size="ButtonSize.Medium" Click="@(() => ResetearPass(Certificacion.Id))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="SGRBlazorApp.Data.User" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Left" Title="Activar/Desactivar" Width="150px">
                    <Template Context="Certificacion">
                        @if (Certificacion.Deleted == null)
                        {
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Medium" Click="@(args => DeleteDealer(Certificacion.Id))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        }
                        else
                        {
                            <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="done" Size="ButtonSize.Medium" Click="@(args => ActivarDealer(Certificacion.Id))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        }
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
        @*<table id="equipos" class="table" style="width:100%">
                <thead>
                    <tr>
                        <th>Usuario</th>
                        <th>Nombre</th>
                        <th>Rol</th>
                        <th style="width:15%"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var Equipo in EquipoList)
                    {
                        <tr>
                            <td>@Equipo.EmailAddress</td>
                            <td>@Equipo.FirstName @Equipo.LastName</td>
                            @if (Equipo.IdRoleNavigation != null)
                            {
                                <td>@Equipo.IdRoleNavigation.Descripcion</td>
                            }
                            else
                            {
                                <td></td>
                            }
                            <AuthorizeView Roles="Administrador" Policy="SeniorEmployee">
                                <Authorized>
                                    <th>
                                        <a class="btn btn-success" href=@string.Format("/editUser/{0}", Equipo.Id)><i class="fa fa-pencil"></i></a>
                                        <a class="btn btn-primary" style="color:white" @onclick="(() => ResetearPass(Equipo.Id))" data-toggle="tooltip" data-placement="top" title="Resetear Password"><i class="fa fa-repeat"></i></a>
                                    </th>
                                </Authorized>
                            </AuthorizeView>
                        </tr>
                    }
                </tbody>
            </table>*@
    }
    else
    {
        <div class="col-12" style="background-color: lightgray; height:400px; vertical-align:middle">
            <br /><br />
            <Chase Center="true" Color="#c21f13" Size="70px"></Chase>
        </div>
    }

    @*<SpinLoader IsLoading="isLoading">
            <ContentTemplate>
                @if (filteredEquipoList != null)
                {
                    <GridView Items="filteredEquipoList" ReloadList="IsGridViewFiltered">
                        <GridColumns>
                            <GridColumn ColumnTitle="Usuario"
                                        OnSearchTextChanged="@(e => OnUserearchTextChanged(e, "Usuario"))"></GridColumn>
                            <GridColumn ColumnTitle="Nombre"
                                        OnSearchTextChanged="@(e => OnUserearchTextChanged(e, "Nombre"))"></GridColumn>
                            <GridColumn ColumnTitle="Rol"
                                        OnSearchTextChanged="@(e => OnUserearchTextChanged(e, "Rol"))"></GridColumn>
                            <AuthorizeView Roles="Administrador" Policy="SeniorEmployee">
                                <Authorized>
                                    <GridColumn ColumnTitle="Actions"></GridColumn>
                                </Authorized>
                            </AuthorizeView>
                        </GridColumns>
                        <GridRow Context="Equipo">
                            <td>@Equipo.EmailAddress</td>
                            <td>@Equipo.FirstName @Equipo.LastName</td>
                            @if (Equipo.IdRoleNavigation != null)
                                {
                                <td>@Equipo.IdRoleNavigation.Descripcion</td>
                                }
                                else
                                {
                                <td></td>
                                }
                            /**/
                            <AuthorizeView Roles="Administrador" Policy="SeniorEmployee">
                                <Authorized>
                                    <th>
                                        <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => EditEquipo(Equipo))">Edit</a> |
                                        <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => DeleteEquipo(Equipo.Id))">Delete</a>
                                    </th>
                                </Authorized>
                            </AuthorizeView>
                        </GridRow>
                    </GridView>
                }
            </ContentTemplate>
        </SpinLoader>*@
</div>

@code {

    public SGRBlazorApp.Data.User Equipo { get; set; }
    public List<SGRBlazorApp.Data.User> EquipoList { get; set; }
    public List<SGRBlazorApp.Data.User> filteredEquipoList { get; set; }
    public string SelectedCity { get; set; }

    public bool IsVisible { get; set; }
    public bool Result { get; set; }
    public string RecordName { get; set; }
    public string[] Cities { get; set; }
    public bool IsGridViewFiltered { get; set; }
    bool isLoading = false;

    ElementReference firstNameTextBox;

    void EditRow(Guid id)
    {
        navigationManager.NavigateTo(string.Format("/editUser/{0}", id));
    }

    void DeleteRow(Guid id)
    {
        navigationManager.NavigateTo(string.Format("/deleteSetting/{0}", id));
    }


    void ShowTooltip(ElementReference elementReference, TooltipOptions options = null)
    {
        tooltipService.Open(elementReference, options.Text, options);
    }

    private async Task ActivarDealer(Guid DealerId)
    {
        var confirmado = await JSRuntime.Confirmar("Atencion!", "¿Desea activar el Usuario?", TipoMensajeSweetAlert.warning);
        if (confirmado)
        {
            await bookStoresService.DeleteAsync("Users/ActivateUser/", DealerId);

            await LoadDealers();
        }
        //throw new Exception("DeleteDealer");
    }

    private async Task DeleteDealer(Guid DealerId)
    {
        var confirmado = await JSRuntime.Confirmar("Atencion!", "¿Desea desactivar el Usuario?", TipoMensajeSweetAlert.warning);
        if (confirmado)
        {
            await bookStoresService.DeleteAsync("Users/DeleteUser/", DealerId);

            await LoadDealers();
        }
        //throw new Exception("DeleteDealer");
    }

    private async Task LoadDealers()
    {
        await Task.Delay(500);

        EquipoList = filteredEquipoList = await bookStoresService.GetAllAsync("Users/GetUsersFull");

        if (EquipoList == null)
        {

            RefreshRequest refreshRequest = new RefreshRequest();
            refreshRequest.AccessToken = await localStorageService.GetItemAsync<string>("accessToken");
            refreshRequest.RefreshToken = await localStorageService.GetItemAsync<string>("refreshToken");
            var user1 = await userService.RefreshTokenAsync(refreshRequest);
            await localStorageService.SetItemAsync("accessToken", user1.AccessToken);

            EquipoList = filteredEquipoList = await bookStoresService.GetAllAsync("Users/GetUsersFull");
        }
        //await JSRuntime.InvokeAsync<object>("TestDataTablesRemove", "#dealers");
        //await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#dealers");
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        Console.WriteLine("User - OnInitialized");
        base.OnInitialized();
    }

    private async Task ResetearPass(Guid ClienteId)
    {
        var confirmado = await JSRuntime.Confirmar("Atencion!", "¿Desea confirmar el reseteo de la Password?", TipoMensajeSweetAlert.warning);
        if (confirmado)
        {
            var user = EquipoList.FirstOrDefault(o => o.Id == ClienteId);
            string passNew = Utility.DefaultPass();
            user.Password = Utility.DefaultPassEnc();
            await bookStoresService.UpdateAsync("Users/UpdateUser/", ClienteId, user);
            await JSRuntime.MostrarMensaje("Pass Reseteada!", "La nueva password es " + passNew, TipoMensajeSweetAlert.success);
        }
        //throw new Exception("DeleteCliente");
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    ClaimsPrincipal user;

    bool IsUserAuthenticated;
    bool IsPublisher;
    bool IsSeniorEmployee;

    public int Count { get; set; } = 400;

    private SGRBlazorApp.Data.User users;

    protected override async Task OnInitializedAsync()
    {
        user = (await authenticationStateTask).User;

        if (!user.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/");
        }
            Console.WriteLine("User - OnInitializedAsync");

            Equipo = new SGRBlazorApp.Data.User();
            EquipoList = filteredEquipoList = await bookStoresService.GetAllAsync("Users/GetUsersFull");

            if (EquipoList == null)
            {
                RefreshRequest refreshRequest = new RefreshRequest();
                refreshRequest.AccessToken = await localStorageService.GetItemAsync<string>("accessToken");
                refreshRequest.RefreshToken = await localStorageService.GetItemAsync<string>("refreshToken");
                var user1 = await userService.RefreshTokenAsync(refreshRequest);
                await localStorageService.SetItemAsync("accessToken", user1.AccessToken);
                EquipoList = filteredEquipoList = await bookStoresService.GetAllAsync("User/GetUsersFull");
            }

            isLoading = true;

            //await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#equipos");

            await base.OnInitializedAsync();
        }

    protected override void OnParametersSet()
    {
        Console.WriteLine("User - OnParametersSet");
        base.OnParametersSet();
    }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("User - OnParametersSetAsync");
        await base.OnParametersSetAsync();
    }

    protected override bool ShouldRender()
    {
        base.ShouldRender();
        Console.WriteLine("User - ShouldRender");

        return true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("User - OnAfterRender - firstRender = " + firstRender);
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("User - OnAfterRenderAsync - firstRender = " + firstRender);
        // //await JSRuntime.InvokeAsync<object>("TestDataTablesRemove", "#equipos");

        //await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#equipos");
        if (firstRender)
        {

            //await LoadUser();

            //isLoading = false;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        Console.WriteLine("User - Dispose");
    }

    private async Task LoadUser()
    {
        await Task.Delay(500);

        EquipoList = filteredEquipoList = await bookStoresService.GetAllAsync("Users/GetUsers");

        if (EquipoList == null)
        {

            RefreshRequest refreshRequest = new RefreshRequest();
            refreshRequest.AccessToken = await localStorageService.GetItemAsync<string>("accessToken");
            refreshRequest.RefreshToken = await localStorageService.GetItemAsync<string>("refreshToken");
            var user1 = await userService.RefreshTokenAsync(refreshRequest);
            await localStorageService.SetItemAsync("accessToken", user1.AccessToken);

            EquipoList = filteredEquipoList = await bookStoresService.GetAllAsync("User/GetUser");
        }

        //await JSRuntime.InvokeAsync<object>("TestDataTablesRemove", "#equipos");
        //await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#equipos");

        StateHasChanged();
    }



    private async Task DeleteEquipo(Guid EquipoId)
    {
        var confirmado = await JSRuntime.Confirm($"¿Desea eliminar el User?");
        if (confirmado)
        {
            await bookStoresService.DeleteAsync("User/DeleteUser/", EquipoId);
            await LoadUser();
        }
        //throw new Exception("DeleteEquipo");
    }

    private void EditEquipo(SGRBlazorApp.Data.User argEquipo)
    {
        Equipo = argEquipo;
    }

    private void OnSelectCityChange(ChangeEventArgs changeEventArgs)
    {
        SelectedCity = (string)changeEventArgs.Value;
    }

    private void OnUserearchTextChanged(ChangeEventArgs changeEventArgs, string columnTitle)
    {
        string searchText = changeEventArgs.Value.ToString();
        IsGridViewFiltered = true;

        switch (columnTitle)
        {
            case "Usuario":
                filteredEquipoList = EquipoList.Where(auth => auth.EmailAddress.ToLower().Contains(searchText)).ToList();
                break;
            case "Nombre":
                filteredEquipoList = EquipoList.Where(auth => auth.FirstName.ToLower().Contains(searchText) || auth.LastName.ToLower().Contains(searchText)).ToList();
                break;
            case "Rol":
                filteredEquipoList = EquipoList.Where(auth => auth.IdRole != null).ToList().Where(auth => auth.IdRoleNavigation.Descripcion.ToLower().Contains(searchText)).ToList();
                break;
            default:
                Console.WriteLine("Default case");
                break;
        }
    }

}