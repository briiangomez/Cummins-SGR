@page "/incidenciaDetail/{Id:guid}"
@using SGRBlazorApp.Data
@using SGRBlazorApp.Interfaces
@using CuriousDriveRazorLibrary
@using Blazored.LocalStorage
@using SGRBlazorApp.Shared
@inject ISgrService<Incidencia> bookStoresService
@inject ISgrService<IncidenciaApi> incidenciaApiService
@inject ISgrService<Dealer> dealerService
@inject IUserService userService
@inject ILocalStorageService localStorageService
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@implements IDisposable
@using System.Reactive.Linq;
@using System.Reactive.Subjects
@using SGRBlazorApp.Services
@inject GeocodingService GeocodingService

    <div class="col-12">
        <h3><b>Informacion de la incidencia Nro @Incidencia.NumeroIncidencia</b></h3>
        <hr />

        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Estado Actual:</label>
            <input class="form-control col-3" value="@IncidenciaApi.nombreEstadoIncidencia" readonly/>
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Equipo:</label>
            <input class="form-control col-3" value="@IncidenciaApi.numeroMotor" readonly />
        </div>

        <h3>Dealer Asignado </h3>

        @if (dealer != null)
        {
            <div class="card-body">
                <div class="card bg-info">
                    <div class="card-body text-white">
                        <h4 class="card-title">Dealer Asignado: <b>@dealer.Name - @dealer.Address, @dealer.City, @dealer.Country </b></h4>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <Radzen.Blazor.RadzenGoogleMap Zoom="16"
                                                   style="height:500px"
                                                   ApiKey="AIzaSyCBhlrEoE5ndgXMCeI7zyq0dK4MJksa8Ak"
                                                   Center="@(new GoogleMapPosition() { Lat = dealer.LatitudGps.Value, Lng = dealer.LongitudGps.Value })">
                        <Markers>
                            <Radzen.Blazor.RadzenGoogleMapMarker Title="@dealer.Name" Label="@dealer.Name" Position="@(new GoogleMapPosition() { Lat = dealer.LatitudGps.Value, Lng = dealer.LongitudGps.Value })" />

                        </Markers>
                    </Radzen.Blazor.RadzenGoogleMap>
                </div>
            </div>
        }


        @*if (IncidenciaApi.nombreEstadoIncidencia == "En Proceso")
        {
        <br />
        <div class="col-12 row">
            <textarea class="form-control" cols="10" rows="10" @bind="@Observaciones"></textarea>
        </div>
        <br />
        <div class="col-12 row">

        </div>
        }
        else*@
        <AuthorizeView Roles="Administrador" Policy="SeniorEmployee">
            <Authorized>
                @if (IncidenciaApi.nombreEstadoIncidencia == "Rechazado")
                {
                    <h3><b>Asignar Nuevo Dealer</b></h3>
                    <div class="col-12 row">
                        <label class="col-2 font-weight-bold">Dealer :</label>
                        <select class="form-control col-10" @onchange="OnChangeEvent2" name="IdDealer" id="IdDealer">
                            <option value="">Seleccione Dealer...</option>
                            @if (Dealers != null)
                            {
                                foreach (var item in Dealers)
                                {
                                    <option value="@item.Id">@item.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <br />
                    <div class="col-12 row">
                        <span class="col-2"></span>
                        <a class="col-1 btn btn-success" @onclick="(() => RechazarIncidencia(Incidencia.Id))">Aceptar </a>
                        <span>&nbsp;</span>
                        <a class="col-1 btn btn-primary" href="/Incidencias">Cancelar</a>
                    </div>
                }
            </Authorized>
        </AuthorizeView>

    </div>

@code
{
    [Parameter]
    public Guid Id { get; set; }
    public Incidencia Incidencia { get; set; }
    public IncidenciaApi IncidenciaApi { get; set; }
    public List<IncidenciaApi> IncidenciaList { get; set; }
    public List<EstadoIncidencia> estadoIncidencia { get; set; }
    public string Observaciones { get; set; }
    public Guid IdDealer { get; set; }
    public List<Dealer> Dealers { get; set; }
    public Dealer dealer { get; set; }

    public void Dispose()
    {
        Console.WriteLine("Motors - Dispose");
    }

    protected override void OnInitialized()
    {
        Console.WriteLine("Clientes - OnInitialized");
        base.OnInitialized();
    }

    private void OnChangeEvent2(ChangeEventArgs changeEventArgs)
    {
        if (!String.IsNullOrEmpty((string)changeEventArgs.Value) && (string)changeEventArgs.Value != "Seleccione Dealer...")
        {
            IdDealer = Guid.Parse((string)changeEventArgs.Value);
            Incidencia.IdDealer = IdDealer;
        }
        //else
        //{
        //      Incidencia.IdDealer = null;
        //}
    }


        private async Task RechazarIncidencia(Guid ClienteId)
    {
        var confirmado = await JSRuntime.Confirmar("Atencion!", "¿Desea confirmar la asignacion del nuevo Dealer para el Reclamo?", TipoMensajeSweetAlert.warning);
        if (confirmado)
        {
            
            await bookStoresService.UpdateAsync("Incidencia/UpdateIncidencia/", Id,Incidencia);
            //await bookStoresService.UpdateAsync("Incidencia/UpdateIncidencia/", Id,Incidencia);
            navigationManager.NavigateTo("/Incidencias");
        }
        //throw new Exception("DeleteCliente");
    }


    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Clientes - OnInitializedAsync");
        Incidencia = new Incidencia();
        IncidenciaApi = new IncidenciaApi();
        Incidencia = await bookStoresService.GetByIdAsync("Incidencia/GetIncidencia/", Id);
        IncidenciaList = await incidenciaApiService.GetAllAsync("Incidencia/GetIncidenciaApi");
        IncidenciaApi = IncidenciaList.FirstOrDefault(o => o.Id == Id);
        Dealers = await dealerService.GetAllAsync("Dealer/GetDealer");
        dealer = Dealers.FirstOrDefault(o => o.Id == Incidencia.IdDealer.Value);


        await base.OnInitializedAsync();
    }
}
