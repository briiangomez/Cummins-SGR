@page "/addMotor"
@using SGRBlazorApp.Data
@using SGRBlazorApp.Interfaces
@using CuriousDriveRazorLibrary
@using Blazored.LocalStorage
@inject ILocalStorageService localStorageService
@inject ISgrService<Motor> bookStoresService
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@implements IDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
<div class="col-12">
    <h3><b>Agregar Nuevo Motor</b></h3>
    <hr />

    <ServerValidations IsVisible="IsVisible" Result="Result">
        @RecordName
    </ServerValidations>

    <EditForm Model="@Motor" OnValidSubmit="@SaveMotor">
        @*<DataAnnotationsValidator />*@

        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Nombre:</label>
            <InputText class="form-control col-3" @bind-Value="Motor.Codigo" placeholder="Codigo" required />
            &nbsp;<ValidationMessage For="@(() => Motor.Codigo)" />
        </div>
        <br />
        <div class="col-12 row">
            <span class="col-2"></span>
            <input type="submit" class="btn btn-success" value="Guardar" />
            <span>&nbsp;</span>
            <a style="background-color:red;color:white" class="btn btn-success" href="/Motores">Cancelar</a>
        </div>
    </EditForm>
</div>
<br />


@code
{
    public Motor Motor { get; set; }
    public bool IsVisible { get; set; }
    public bool Result { get; set; }
    public string RecordName { get; set; }

    public void Dispose()
    {
        Console.WriteLine("Motores - Dispose");
    }

    private Dictionary<string, object> htmlAttribute { get; set; } = new Dictionary<string, object>() {
            {"maxlength", "8" }
            };

    //private async void OnChange(KeyboardEventArgs e)
    //{
    //    if(!String.IsNullOrEmpty(Motor.NumeroMotor))
    //    {
    //        if (Motor.NumeroMotor.Length > 7)
    //        {
    //            await JSRuntime.MostrarMensaje("Error!", "El Numero de Motor no puede ser mayor a 8 caracteres", TipoMensajeSweetAlert.error);
    //            Motor.NumeroMotor = Motor.NumeroMotor.Substring(0,8);
    //        }
    //    }
    //}

    //string stringValue = "";

    //private async Task SetValue(string Value)
    //{
    //    if (Value.Length > 7)
    //    {
    //        await JSRuntime.MostrarMensaje("Error!", "El Numero de Motor no puede ser mayor a 8 caracteres", TipoMensajeSweetAlert.error);
    //        Motor.NumeroMotor = Value.Substring(0,8);
    //    }
    //    else
    //    {
    //        stringValue = Value;

    //    }
    //}

    protected override void OnInitialized()
    {
        Console.WriteLine("Clientes - OnInitialized");
        base.OnInitialized();
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    ClaimsPrincipal user;

    bool IsUserAuthenticated;
    bool IsPublisher;
    bool IsSeniorEmployee;

    public int Count { get; set; } = 400;

    private SGRBlazorApp.Data.User users;

    protected override async Task OnInitializedAsync()
    {
        user = (await authenticationStateTask).User;

        if (!user.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/");
        }
        Console.WriteLine("Clientes - OnInitializedAsync");

        Motor = new Motor();
        await base.OnInitializedAsync();
    }

    private async Task SaveMotor()
    {
        try
        {
            await bookStoresService.SaveAsync("Motor/CreateMotor", Motor);

            //if(Motor.NumeroMotor.Length < 8)
            //{
            //    Motor.NumeroMotor = Motor.NumeroMotor.PadLeft(8, '0');
            //    //Motor.NumeroMotor = Motor.NumeroMotor.ToString("00000000");
            //    //Motor.NumeroMotor = Motor.NumeroMotor.ToString("D8");
            //}
            Result = true;
            IsVisible = true;

            //var firstName = Motor.NumeroMotor;
            //var lastName = Motor.Motor;

            //RecordName = firstName + " " + lastName;

            Motor = new Motor();

            navigationManager.NavigateTo("/Motores");
        }
        catch (Exception ex)
        {
            await JSRuntime.MostrarMensaje("Error!", "Ocurrio un error actualizando, por favor intente nuevamente!", TipoMensajeSweetAlert.error);
            Logger.AddLine(String.Format("{0}-{1}-{2}", DateTime.Now.ToString(), ex.Message, ex.StackTrace));
        }
    }
}
