@page "/motores"
@using SGRBlazorApp.Data
@using SGRBlazorApp.Interfaces
@using CuriousDriveRazorLibrary
@using Blazored.LocalStorage
@using SGRBlazorApp.Shared
@inject ISgrService<Motor> bookStoresService
@inject IUserService userService
@inject ILocalStorageService localStorageService
@inject IJSRuntime JSRuntime
@implements IDisposable
@inject NavigationManager navigationManager
@inject TooltipService tooltipService

<div class="col-12">

    <h3><b>Listado de Motores</b></h3>
    <br />
    <AuthorizeView Roles="Administrador" Policy="SeniorEmployee">
        <Authorized>
            <a class="btn btn-primary" style="text-underline-position:below; cursor:pointer; " href="/addMotor">Nuevo Motor</a>
        </Authorized>
    </AuthorizeView>
    <br />
    <br />

    @if (isLoading)
    {
        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="false"
                        FilterMode="FilterMode.Simple" PageSize="20" AllowPaging="true" AllowSorting="true" Data="@MotorList.OrderBy(o => o.Codigo).ToList()" TItem="Motor" ColumnWidth="200px"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        LogicalFilterOperator="LogicalFilterOperator.Or">
            <Columns>
                <RadzenDataGridColumn TItem="Motor" Property="Codigo" Title="Nombre" />
                <RadzenDataGridColumn TItem="Motor" Context="sampleBlazorModelsSampleOrder" Filterable="false" Sortable="false" TextAlign="TextAlign.Left"   Title="Editar"  Width="100px">
                    <Template Context="Motor">
                        <RadzenButton Icon="edit" Size="ButtonSize.Medium"  Click="@(args => EditRow(Motor.Id))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Motor" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Left"   Title="Eliminar"  Width="70px">
                    <Template Context="Motor">
                        <RadzenButton ButtonStyle="ButtonStyle.Danger"   Icon="close" Size="ButtonSize.Medium" Click="@(args => DeleteMotor(Motor.Id))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
        @*<table id="equipos" class="table" style="width:100%">
                <thead>
                    <tr>
                        <th>Nombre</th>
                        <th style="width:15%"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var Motor in MotorList)
                    {
                        <tr>
                            <td>@Motor.Codigo</td>
                            <AuthorizeView Roles="Administrador" Policy="SeniorEmployee">
                                <Authorized>
                                    <td>
                                        <a class="btn btn-success" href=@string.Format("/editMotor/{0}", Motor.Id)><i class="fa fa-pencil"></i></a>
                                        <a style="background-color:red;color:white" class="btn btn-success" @onclick="(() => DeleteMotor(Motor.Id))"><i class="fa fa-trash"></i></a>
                                    </td>
                                </Authorized>
                            </AuthorizeView>
                        </tr>
                    }
                </tbody>
            </table>*@
    }
    else
    {
        <div class="col-12" style="background-color: lightgray; height:400px; vertical-align:middle">
            <br /><br />
            <Chase Center="true" Color="#c21f13" Size="70px"></Chase>
        </div>
    }
    @*<SpinLoader IsLoading="isLoading">
            <LoadingTemplate>
                <div class="col-12" style="background-color: lightgray; height:400px; vertical-align:middle">
                    <br /><br />
                    <Chase Center="true" Color="#c21f13" Size="70px"></Chase>
                </div>
            </LoadingTemplate>
            <ContentTemplate>
                @if (filteredMotorList != null)
                {
                    <GridView Items="filteredMotorList" ReloadList="IsGridViewFiltered">
                        <GridColumns>
                            <GridColumn ColumnTitle="NumeroMotor"
                                        OnSearchTextChanged="@(e => OnMotorearchTextChanged(e, "NumeroMotor"))"></GridColumn>
                            <GridColumn ColumnTitle="Modelo"
                                        OnSearchTextChanged="@(e => OnMotorearchTextChanged(e, "Modelo"))"></GridColumn>
                            <GridColumn ColumnTitle="Motor"
                                        OnSearchTextChanged="@(e => OnMotorearchTextChanged(e, "Motor"))"></GridColumn>
                            <AuthorizeView Roles="Administrador" Policy="SeniorEmployee">
                                <Authorized>
                                    <GridColumn ColumnTitle="Actions"></GridColumn>
                                </Authorized>
                            </AuthorizeView>
                        </GridColumns>
                        <GridRow Context="Motor">
                            <td>
                                <NavLink href=@string.Format("/Motor/Motordetail/{0}", @Motor.Id)>
                                    @Motor.Id
                                </NavLink>
                            </td>

                                <Authorized>
                                    <th>
                                        <a style="text-underline-position:below; cursor:pointer; color:blue" href=@string.Format("/editMotor/{0}", Motor.Id)>Edit</a> |
                                        <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => DeleteMotor(Motor.Id))">Delete</a>
                                    </th>
                                </Authorized>
                            </AuthorizeView>
                        </GridRow>
                    </GridView>
                }
            </ContentTemplate>
        </SpinLoader>*@
</div>

@code {

    public Motor Motor { get; set; }
    public List<Motor> MotorList { get; set; }
    public List<Motor> filteredMotorList { get; set; }
    public string SelectedCity { get; set; }

    public bool IsVisible { get; set; }
    public bool Result { get; set; }
    public string RecordName { get; set; }
    public string[] Cities { get; set; }
    public bool IsGridViewFiltered { get; set; }
    bool isLoading = false;

    void EditRow(Guid id)
    {
        navigationManager.NavigateTo(string.Format("/editMotor/{0}", id));
    }

    //void DeleteRow(Guid id)
    //{
    //    navigationManager.NavigateTo(string.Format("/deleteEquipo/{0}", id));
    //}


    ElementReference firstNameTextBox;

    protected override void OnInitialized()
    {
        Console.WriteLine("Motor - OnInitialized");
        base.OnInitialized();
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    ClaimsPrincipal user;

    bool IsUserAuthenticated;
    bool IsPublisher;
    bool IsSeniorEmployee;

    public int Count { get; set; } = 400;

    private SGRBlazorApp.Data.User users;

    protected override async Task OnInitializedAsync()
    {
        user = (await authenticationStateTask).User;

        if (!user.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/");
        }
        Console.WriteLine("Motor - OnInitializedAsync");

        Motor = new Motor();
        MotorList = filteredMotorList = await bookStoresService.GetAllAsync("Motor/GetMotor");

        if (MotorList == null)
        {

            RefreshRequest refreshRequest = new RefreshRequest();
            refreshRequest.AccessToken = await localStorageService.GetItemAsync<string>("accessToken");
            refreshRequest.RefreshToken = await localStorageService.GetItemAsync<string>("refreshToken");
            var user1 = await userService.RefreshTokenAsync(refreshRequest);
            await localStorageService.SetItemAsync("accessToken", user1.AccessToken);

            MotorList = filteredMotorList = await bookStoresService.GetAllAsync("Motor/GetMotor");
        }
        isLoading = true;

        //await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#equipos");
        await base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("Motor - OnParametersSet");
        base.OnParametersSet();
    }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("Motor - OnParametersSetAsync");
        await base.OnParametersSetAsync();
    }

    protected override bool ShouldRender()
    {
        base.ShouldRender();
        Console.WriteLine("Motor - ShouldRender");

        return true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("Motor - OnAfterRender - firstRender = " + firstRender);
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Motor - OnAfterRenderAsync - firstRender = " + firstRender);
        ////await JSRuntime.InvokeAsync<object>("TestDataTablesRemove", "#equipos");
        //await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#equipos");
        if (firstRender)
        {
            //await LoadMotor();

            //isLoading = false;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        Console.WriteLine("Motor - Dispose");
    }

    private async Task LoadMotor()
    {
        await Task.Delay(500);

        MotorList = filteredMotorList = await bookStoresService.GetAllAsync("Motor/GetMotor");

        if (MotorList == null)
        {

            RefreshRequest refreshRequest = new RefreshRequest();
            refreshRequest.AccessToken = await localStorageService.GetItemAsync<string>("accessToken");
            refreshRequest.RefreshToken = await localStorageService.GetItemAsync<string>("refreshToken");
            var user1 = await userService.RefreshTokenAsync(refreshRequest);
            await localStorageService.SetItemAsync("accessToken", user1.AccessToken);

            MotorList = filteredMotorList = await bookStoresService.GetAllAsync("Motor/GetMotor");
        }

        isLoading = true;
        //await JSRuntime.InvokeAsync<object>("TestDataTablesRemove", "#equipos");
        //await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#equipos");

        MotorList = MotorList.OrderBy(o => o.Descripcion).ToList();

        StateHasChanged();
    }



    private async Task DeleteMotor(Guid MotorId)
    {
        var confirmado = await JSRuntime.Confirmar("Atencion!", "¿Desea eliminar el Motor?", TipoMensajeSweetAlert.warning);
        if (confirmado)
        {
            await bookStoresService.DeleteAsync("Motor/DeleteMotor/", MotorId);
            await LoadMotor();
        }
        //throw new Exception("DeleteMotor");
    }

    private void EditMotor(Motor argMotor)
    {
        Motor = argMotor;
    }

    private void OnSelectCityChange(ChangeEventArgs changeEventArgs)
    {
        SelectedCity = (string)changeEventArgs.Value;
    }

    void ShowTooltip(ElementReference elementReference, TooltipOptions options = null)
    {
        tooltipService.Open(elementReference, options.Text, options);
    }


    private void OnMotorearchTextChanged(ChangeEventArgs changeEventArgs, string columnTitle)
    {
        //string searchText = changeEventArgs.Value.ToString();
        //IsGridViewFiltered = true;

        //switch (columnTitle)
        //{
        //    case "NumeroMotor":
        //        filteredMotorList = MotorList.Where(auth => auth.NumeroMotor.ToLower().Contains(searchText)).ToList();
        //        break;
        //    case "Modelo":
        //        filteredMotorList = MotorList.Where(auth => auth.Modelo.ToLower().Contains(searchText)).ToList();
        //        break;
        //    case "Motor":
        //        filteredMotorList = MotorList.Where(auth => auth.Motor.ToLower().Contains(searchText)).ToList();
        //        break;
        //    default:
        //        Console.WriteLine("Default case");
        //        break;
        //}
    }

}