@page "/camaras-vivo"
@using CuriousDriveRazorLibrary
@using Blazored.LocalStorage
@inject ITBService<Camara> bookStoresService
@inject ITBService<Setting> settingService
@inject IUserService userService
@inject ILocalStorageService localStorageService
@inject IJSRuntime JSRuntime
@implements IDisposable

    <div class="row">
        @if (isLoading)
        {

            <div class="col-xl-6">
                <h3 style="font-weight:bold; color:#EF272C">Camaras En Vivo</h3>
                <RadzenPanel AllowCollapse="false" Style="width:100%;margin-bottom: 20px; height:100%;">
                    @*Expand=@(() => Change("Panel expanded")) Collapse=@(() => Change("Panel collapsed"))*@
                    @*<HeaderTemplate>
                        <span style="text-align:center;display:block">
                            <RadzenIcon Icon="camera" /><b style="font-size:30px"> CAMARAS </b>
                        </span>
                    </HeaderTemplate>*@
                    <ChildContent>
                        <RadzenDataList PageSize="1" WrapItems="true" AllowPaging="true"
                                        Data="@EquipoList" TItem="Camara">
                            <Template Context="order">
                                <RadzenCard Style="width:80%;height:300px">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div style="margin-top:20px">Camara:</div>
                                            <b>@order.Nombre</b>
                                            <div style="margin-top:20px">IP:</div>
                                            <b>@(order.Ip)</b>
                                            <div style="margin-top:20px">Puerto - Live:</div>
                                            <b>@(PuertoSin)</b>
                                            <br />
                                            <a class="btn btn-primary" style="color:white" @onclick="(() => ActivarVideoSin(order.Id))">Video en Vivo - Sin Deteccion</a>
                                        </div>
                                        <div class="col-md-6">
                                            @*<b>@String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", order.Freight)</b>*@
                                            <div style="margin-top:20px">Puerto - Deteccion:</div>
                                            <b>@(PuertoCon)</b>
                                            <div style="margin-top:20px">Estado Actual:</div>
                                            <b>@(EstadoCam)</b>
                                            <div style="margin-top:20px">Ultima Conexion:</div>
                                            <b>@(order.UltimaConexion?.ToString("dd/MM/yyyy"))</b>
                                            <br />
                                            <a class="btn btn-success" style="color:white" @onclick="(() => ActivarVideoCon(order.Id))">Video en Vivo - Con Deteccion</a>

                                        </div>
                                    </div>
                                </RadzenCard>
                            </Template>
                        </RadzenDataList>
                    </ChildContent>
                </RadzenPanel>
            </div>
            @if (IsVisibleCon)
            {
                <div class="col-xl-6">
                    <CamViewer Address="@URLCon"></CamViewer>
                </div>
            }
            else if (IsVisibleSin)
            {
                <div class="col-xl-6">
                    <CamDetect Address="@URLSin"></CamDetect>
                </div>
            }
        }
        else
        {
            <div class="col-12" style="background-color: lightgray; height:400px; vertical-align:middle">
                <br /><br />
                <Chase Center="true" Color="#c21f13" Size="70px"></Chase>
            </div>
        }
    </div>


@code {

    public Camara CamaraCon { get; set; }
    public Camara CamaraSin { get; set; }
    public List<Camara> EquipoList { get; set; }
    public List<Setting> ListSetting { get; set; }
    public List<Camara> filteredEquipoList { get; set; }
    public string SelectedCity { get; set; }
    public string URLCon { get; set; }
    public string URLSin { get; set; }
    public string EstadoCam { get; set; }
    public string EstadoSin { get; set; }
    public string PuertoCon { get; set; }
    public string PuertoSin { get; set; }

    bool IsVisibleCon = false;
    bool IsVisibleSin  = false;
    public bool Result { get; set; }
    public string RecordName { get; set; }
    public string[] Cities { get; set; }
    public bool IsGridViewFiltered { get; set; }
    bool isLoading = false;

    ElementReference firstNameTextBox;

    protected override void OnInitialized()
    {
        Console.WriteLine("User - OnInitialized");
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("User - OnInitializedAsync");

        CamaraCon = new Camara();
        CamaraSin = new Camara();
        IsVisibleCon = false;
        IsVisibleSin = false;
        EstadoCam = "Desconectada";
        EstadoSin = "Desconectada";
        EquipoList = filteredEquipoList = await bookStoresService.GetAllAsync("Camaras/GetCamaras");
        ListSetting  = await settingService.GetAllAsync("Setting/GetSetting");

        if(ListSetting.Where(o => o.Key.Contains("Puerto Con Deteccion")).Count() > 0)
        {
            PuertoCon = ListSetting.FirstOrDefault(o => o.Key.Contains("Puerto Con Deteccion")).Value;
        }
        if(ListSetting.Where(o => o.Key.Contains("Puerto Sin Deteccion")).Count() > 0)
        {
            PuertoSin = ListSetting.FirstOrDefault(o => o.Key.Contains("Puerto Sin Deteccion")).Value;
        }
        if (EquipoList == null)
        {

            RefreshRequest refreshRequest = new RefreshRequest();
            refreshRequest.AccessToken = await localStorageService.GetItemAsync<string>("accessToken");
            refreshRequest.RefreshToken = await localStorageService.GetItemAsync<string>("refreshToken");
            var user1 = await userService.RefreshTokenAsync(refreshRequest);
            await localStorageService.SetItemAsync("accessToken", user1.AccessToken);

            EquipoList = filteredEquipoList = await bookStoresService.GetAllAsync("User/GetUser");
        }

        isLoading = true;

        //await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#equipos");

        await base.OnInitializedAsync();
    }

    private async Task ActivarVideoCon(Guid EquipoId)
    {
        CamaraCon = EquipoList.FirstOrDefault(o => o.Id == EquipoId);
        URLCon = String.Format("http://{0}:{1}", CamaraCon.Ip, PuertoCon);
        IsVisibleCon = true;
        IsVisibleSin = false;
        EstadoCam = "Conectada";
    }

    private async Task ActivarVideoSin(Guid EquipoId)
    {
        CamaraSin = EquipoList.FirstOrDefault(o => o.Id == EquipoId);
        URLSin = String.Format("http://{0}:{1}", CamaraSin.Ip, PuertoSin);
        IsVisibleCon = false;
        IsVisibleSin = true;
        EstadoCam = "Conectada";
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("User - OnParametersSet");
        base.OnParametersSet();
    }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("User - OnParametersSetAsync");
        await base.OnParametersSetAsync();
    }

    protected override bool ShouldRender()
    {
        base.ShouldRender();
        Console.WriteLine("User - ShouldRender");

        return true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("User - OnAfterRender - firstRender = " + firstRender);
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("User - OnAfterRenderAsync - firstRender = " + firstRender);
        // await JSRuntime.InvokeAsync<object>("TestDataTablesRemove", "#equipos");

        //await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#equipos");
        if (firstRender)
        {

            //await LoadUser();

            //isLoading = false;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        Console.WriteLine("User - Dispose");
    }

    private async Task LoadUser()
    {
        await Task.Delay(500);

        EquipoList = filteredEquipoList = await bookStoresService.GetAllAsync("Users/GetUsers");

        if (EquipoList == null)
        {

            RefreshRequest refreshRequest = new RefreshRequest();
            refreshRequest.AccessToken = await localStorageService.GetItemAsync<string>("accessToken");
            refreshRequest.RefreshToken = await localStorageService.GetItemAsync<string>("refreshToken");
            var user1 = await userService.RefreshTokenAsync(refreshRequest);
            await localStorageService.SetItemAsync("accessToken", user1.AccessToken);

            EquipoList = filteredEquipoList = await bookStoresService.GetAllAsync("User/GetUser");
        }

        //await JSRuntime.InvokeAsync<object>("TestDataTablesRemove", "#equipos");
        //await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#equipos");

        StateHasChanged();
    }



    private async Task DeleteEquipo(Guid EquipoId)
    {
        var confirmado = await JSRuntime.Confirm($"¿Desea eliminar el User?");
        if (confirmado)
        {
            await bookStoresService.DeleteAsync("User/DeleteUser/", EquipoId);
            await LoadUser();
        }
        //throw new Exception("DeleteEquipo");
    }

    //private void EditEquipo(Camara argEquipo)
    //{
    //    Equipo = argEquipo;
    //}

    private void OnSelectCityChange(ChangeEventArgs changeEventArgs)
    {
        SelectedCity = (string)changeEventArgs.Value;
    }

    //private void OnUserearchTextChanged(ChangeEventArgs changeEventArgs, string columnTitle)
    //{
    //    string searchText = changeEventArgs.Value.ToString();
    //    IsGridViewFiltered = true;

    //    switch (columnTitle)
    //    {
    //        case "Usuario":
    //            filteredEquipoList = EquipoList.Where(auth => auth.EmailAddress.ToLower().Contains(searchText)).ToList();
    //            break;
    //        case "Nombre":
    //            filteredEquipoList = EquipoList.Where(auth => auth.FirstName.ToLower().Contains(searchText) || auth.LastName.ToLower().Contains(searchText)).ToList();
    //            break;
    //        case "Rol":
    //            filteredEquipoList = EquipoList.Where(auth => auth.IdRole != null).ToList().Where(auth => auth.IdRoleNavigation.Descripcion.ToLower().Contains(searchText)).ToList();
    //            break;
    //        default:
    //            Console.WriteLine("Default case");
    //            break;
    //    }
    //}

}