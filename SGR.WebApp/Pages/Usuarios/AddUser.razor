@page "/addUser"
@using CuriousDriveRazorLibrary
@using Blazored.LocalStorage
@inject ITBService<Role> roleService
@inject IUserService userService
@inject ILocalStorageService localStorageService
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@implements IDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorageService
<div class="col-12">

    <EditForm Model="@user" OnValidSubmit="@RegisterUser">
        <div>
            <h3 style="font-weight:bold; color:#EF272C">Nuevo Usuario</h3>
        </div>
        <div>
            <br />
        </div>
        <div class="col-12 row">
            <label class="col-4 font-weight-bold">Usuario :</label>
            <input class="form-control col-8" @bind="user.EmailAddress" placeholder="Usuario" required />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-4 font-weight-bold">Password :</label>
            <input type="password" class="form-control col-8" @bind="user.Password" placeholder="Password" required />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-4 font-weight-bold">Confirmar password :</label>
            <input type="password" class="form-control col-8" @bind="user.ConfirmPassword" placeholder="Confirmar password" required />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-4 font-weight-bold">Apellido :</label>
            <input class="form-control col-8" @bind="user.FirstName" placeholder="Nombre" required />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-4 font-weight-bold">Apellido :</label>
            <input class="form-control col-8" @bind="user.LastName" placeholder="Apellido" required />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-4 font-weight-bold">Rol :</label>
            <select class="form-control col-8" @onchange="OnChangeEvent" name="IdRole" id="IdRole">
                <option value="">Seleccione Rol...</option>
                @if (Roles != null)
                {
                    foreach (var item in Roles)
                    {
                        <option value="@item.Id">@item.Descripcion</option>
                    }
                }
            </select>
            &nbsp;<ValidationMessage For="@(() => user.IdRole)" />
        </div>
        <br />
        <div class="col-12 row">
            <span class="col-2"></span>
            <input type="submit" class="btn btn-success" value="Guardar" />
            <span>&nbsp;</span>
            <a class="btn btn-danger" href="/Usuarios">Cancelar</a>
        </div>
        <br />
        <div class="col-12 row" style="text-align:left; font-weight:bold">
            <span class="col-12">@LoginMesssage</span>
        </div>
    </EditForm>
    </div>
    <br />


@code
{
    private User user;
    public string LoginMesssage { get; set; }
    public List<Role> Roles { get; set; }

    public bool isDealer { get; set; }
    public string TipoDNI { get; set; }
    public string RecordName { get; set; }
    public Guid IdRole { get; set; }

    private void OnChangeEvent(ChangeEventArgs changeEventArgs)
    {

        if (!String.IsNullOrEmpty((string)changeEventArgs.Value) && (string)changeEventArgs.Value != "Seleccione Rol...")
        {
            IdRole = Guid.Parse((string)changeEventArgs.Value);
            user.IdRole = IdRole;
        }
        else
        {
            isDealer = false;
        }
    }

    //private void OnChangeEvent2(ChangeEventArgs changeEventArgs)
    //{
    //    if (!String.IsNullOrEmpty((string)changeEventArgs.Value) && (string)changeEventArgs.Value != "Seleccione Dealer...")
    //    {
    //        IdDealer = Guid.Parse((string)changeEventArgs.Value);
    //        user.IdDealer = IdDealer;
    //    }
    //    else
    //    {
    //          user.IdDealer = null;
    //    }
    //}

    protected async override Task OnInitializedAsync()
    {
        user = new User();
        isDealer = false;
        //Dealers = await dealerService.GetAllAsync("Dealer/GetDealer");
        Roles = await roleService.GetAllAsync("Role/GetRole");
        //return base.OnInitializedAsync();

    }

    public void Dispose()
    {
        Console.WriteLine("Users - Dispose");
    }

    private async Task<bool> RegisterUser()
    {
        //assume that user is valid
        user.Source = "APPC";
        var returnedUser = await userService.RegisterUserAsync(user);

        if (returnedUser.EmailAddress != null)
        {
            //((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(returnedUser);
            NavigationManager.NavigateTo("/Usuarios");
        }
        else
        {
            LoginMesssage = "Error creando usuario, intente nuevamente";
        }

        return await Task.FromResult(true);
    }
    }
