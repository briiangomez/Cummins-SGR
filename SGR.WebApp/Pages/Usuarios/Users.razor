@page "/Usuarios"
@using CuriousDriveRazorLibrary
@using Blazored.LocalStorage
@inject ITBService<User> bookStoresService
@inject IUserService userService
@inject ILocalStorageService localStorageService
@inject IJSRuntime JSRuntime
@implements IDisposable

    <div class="col-12">
        <h3 style="font-weight:bold; color:#EF272C">Listado de Usuarios</h3>
        <br />
        <a class="btn btn-primary" style="text-underline-position:below;" href="/addUser">Nuevo Usuario</a>
        <br /><br />
        @if (isLoading)
        {
            <table id="equipos" class="display" style="width:100%">
                <thead>
                    <tr>
                        <th>Usuario</th>
                        <th>Nombre</th>
                        <th>Rol</th>
                        @*<th style="width:5%"></th>*@
                    </tr>
                </thead>
                <tbody>
                    @foreach (var Equipo in EquipoList)
                    {
                    <tr>
                        <td>@Equipo.EmailAddress</td>
                        <td>@Equipo.FirstName @Equipo.LastName</td>
                        @if (Equipo.IdRoleNavigation != null)
                        {
                            <td>@Equipo.IdRoleNavigation.Descripcion</td>
                        }
                        else
                        {
                            <td></td>
                        }
                        <AuthorizeView Roles="Administrador" Policy="SeniorEmployee">
                            <Authorized>
                                @*<td>
                                    <a class="btn btn-success" href=@string.Format("/editMotor/{0}", Equipo.Id)><i class="fa fa-pencil"></i></a>
                                    <a style="background-color:red;color:white" class="btn btn-success" @onclick="(() => DeleteEquipo(Equipo.Id))"><i class="fa fa-trash"></i></a>
                                </td>*@
                            </Authorized>
                        </AuthorizeView>
                    </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="col-12" style="background-color: lightgray; height:400px; vertical-align:middle">
                <br /><br />
                <Chase Center="true" Color="#c21f13" Size="70px"></Chase>
            </div>
        }

        @*<SpinLoader IsLoading="isLoading">
            <ContentTemplate>
                @if (filteredEquipoList != null)
                {
                    <GridView Items="filteredEquipoList" ReloadList="IsGridViewFiltered">
                        <GridColumns>
                            <GridColumn ColumnTitle="Usuario"
                                        OnSearchTextChanged="@(e => OnUserearchTextChanged(e, "Usuario"))"></GridColumn>
                            <GridColumn ColumnTitle="Nombre"
                                        OnSearchTextChanged="@(e => OnUserearchTextChanged(e, "Nombre"))"></GridColumn>
                            <GridColumn ColumnTitle="Rol"
                                        OnSearchTextChanged="@(e => OnUserearchTextChanged(e, "Rol"))"></GridColumn>
                            <AuthorizeView Roles="Administrador" Policy="SeniorEmployee">
                                <Authorized>
                                    <GridColumn ColumnTitle="Actions"></GridColumn>
                                </Authorized>
                            </AuthorizeView>
                        </GridColumns>
                        <GridRow Context="Equipo">
                            <td>@Equipo.EmailAddress</td>
                            <td>@Equipo.FirstName @Equipo.LastName</td>
                            @if (Equipo.IdRoleNavigation != null)
                                {
                                <td>@Equipo.IdRoleNavigation.Descripcion</td>
                                }
                                else
                                {
                                <td></td>
                                }
                            /**/
                            <AuthorizeView Roles="Administrador" Policy="SeniorEmployee">
                                <Authorized>
                                    <th>
                                        <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => EditEquipo(Equipo))">Edit</a> |
                                        <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => DeleteEquipo(Equipo.Id))">Delete</a>
                                    </th>
                                </Authorized>
                            </AuthorizeView>
                        </GridRow>
                    </GridView>
                }
            </ContentTemplate>
        </SpinLoader>*@
    </div>

@code {

    public User Equipo { get; set; }
    public List<User> EquipoList { get; set; }
    public List<User> filteredEquipoList { get; set; }
    public string SelectedCity { get; set; }

    public bool IsVisible { get; set; }
    public bool Result { get; set; }
    public string RecordName { get; set; }
    public string[] Cities { get; set; }
    public bool IsGridViewFiltered { get; set; }
    bool isLoading = false;

    ElementReference firstNameTextBox;

    protected override void OnInitialized()
    {
        Console.WriteLine("User - OnInitialized");
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("User - OnInitializedAsync");

        Equipo = new User();
        EquipoList = filteredEquipoList = await bookStoresService.GetAllAsync("Users/GetUsers");

        if (EquipoList == null)
        {

            RefreshRequest refreshRequest = new RefreshRequest();
            refreshRequest.AccessToken = await localStorageService.GetItemAsync<string>("accessToken");
            refreshRequest.RefreshToken = await localStorageService.GetItemAsync<string>("refreshToken");
            var user1 = await userService.RefreshTokenAsync(refreshRequest);
            await localStorageService.SetItemAsync("accessToken", user1.AccessToken);

            EquipoList = filteredEquipoList = await bookStoresService.GetAllAsync("User/GetUser");
        }

        isLoading = true;

        await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#equipos");

        await base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("User - OnParametersSet");
        base.OnParametersSet();
    }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("User - OnParametersSetAsync");
        await base.OnParametersSetAsync();
    }

    protected override bool ShouldRender()
    {
        base.ShouldRender();
        Console.WriteLine("User - ShouldRender");

        return true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("User - OnAfterRender - firstRender = " + firstRender);
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("User - OnAfterRenderAsync - firstRender = " + firstRender);
        // 

        if (isLoading)
        {
            await JSRuntime.InvokeAsync<object>("TestDataTablesRemove", "#equipos");
            await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#equipos");
        }
        //else
        //{
        //    await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#equipos");
        //}

        if (firstRender)
        {

            //await LoadUser();

            //isLoading = false;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        Console.WriteLine("User - Dispose");
    }

    private async Task LoadUser()
    {
        await Task.Delay(500);

        EquipoList = filteredEquipoList = await bookStoresService.GetAllAsync("Users/GetUsers");

        if (EquipoList == null)
        {

            RefreshRequest refreshRequest = new RefreshRequest();
            refreshRequest.AccessToken = await localStorageService.GetItemAsync<string>("accessToken");
            refreshRequest.RefreshToken = await localStorageService.GetItemAsync<string>("refreshToken");
            var user1 = await userService.RefreshTokenAsync(refreshRequest);
            await localStorageService.SetItemAsync("accessToken", user1.AccessToken);

            EquipoList = filteredEquipoList = await bookStoresService.GetAllAsync("User/GetUser");
        }

        //await JSRuntime.InvokeAsync<object>("TestDataTablesRemove", "#equipos");
        if(isLoading)
        {
            //await JSRuntime.InvokeAsync<object>("TestDataTablesRemove", "#equipos");
            await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#equipos");
        }

        StateHasChanged();
    }



    private async Task DeleteEquipo(Guid EquipoId)
    {
        var confirmado = await JSRuntime.Confirm($"¿Desea eliminar el User?");
        if (confirmado)
        {
            await bookStoresService.DeleteAsync("User/DeleteUser/", EquipoId);
            await LoadUser();
        }
        //throw new Exception("DeleteEquipo");
    }

    private void EditEquipo(User argEquipo)
    {
        Equipo = argEquipo;
    }

    private void OnSelectCityChange(ChangeEventArgs changeEventArgs)
    {
        SelectedCity = (string)changeEventArgs.Value;
    }

    private void OnUserearchTextChanged(ChangeEventArgs changeEventArgs, string columnTitle)
    {
        string searchText = changeEventArgs.Value.ToString();
        IsGridViewFiltered = true;

        switch (columnTitle)
        {
            case "Usuario":
                filteredEquipoList = EquipoList.Where(auth => auth.EmailAddress.ToLower().Contains(searchText)).ToList();
                break;
            case "Nombre":
                filteredEquipoList = EquipoList.Where(auth => auth.FirstName.ToLower().Contains(searchText) || auth.LastName.ToLower().Contains(searchText)).ToList();
                break;
            case "Rol":
                filteredEquipoList = EquipoList.Where(auth => auth.IdRole != null).ToList().Where(auth => auth.IdRoleNavigation.Descripcion.ToLower().Contains(searchText)).ToList();
                break;
            default:
                Console.WriteLine("Default case");
                break;
        }
    }

}